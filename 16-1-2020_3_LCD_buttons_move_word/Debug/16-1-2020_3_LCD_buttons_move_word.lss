
16-1-2020_3_LCD_buttons_move_word.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002058  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00002058  000020ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800092  00800092  0000211e  2**0
                  ALLOC
  3 .stab         0000180c  00000000  00000000  00002120  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ca1  00000000  00000000  0000392c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000045cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000470d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000487d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000064c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000073b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008160  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000082c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000854d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008d1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e5       	ldi	r30, 0x58	; 88
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 39       	cpi	r26, 0x93	; 147
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <main>
      8a:	0c 94 2a 10 	jmp	0x2054	; 0x2054 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0f 10 	jmp	0x201e	; 0x201e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ff 0f 	jmp	0x1ffe	; 0x1ffe <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ff 0f 	jmp	0x1ffe	; 0x1ffe <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0f 10 	jmp	0x201e	; 0x201e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ff 0f 	jmp	0x1ffe	; 0x1ffe <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ff 0f 	jmp	0x1ffe	; 0x1ffe <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ff 0f 	jmp	0x1ffe	; 0x1ffe <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 03 10 	jmp	0x2006	; 0x2006 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 1f 10 	jmp	0x203e	; 0x203e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <setPinDir>:
#include "DIO_interface.h"
#include "DIO_register.h"


void setPinDir(u8 Port, u8 Pin, u8 Dir)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <setPinDir+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <setPinDir+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	switch (Port)
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	3d 83       	std	Y+5, r19	; 0x05
     b62:	2c 83       	std	Y+4, r18	; 0x04
     b64:	8c 81       	ldd	r24, Y+4	; 0x04
     b66:	9d 81       	ldd	r25, Y+5	; 0x05
     b68:	82 34       	cpi	r24, 0x42	; 66
     b6a:	91 05       	cpc	r25, r1
     b6c:	09 f4       	brne	.+2      	; 0xb70 <setPinDir+0x2a>
     b6e:	44 c0       	rjmp	.+136    	; 0xbf8 <setPinDir+0xb2>
     b70:	2c 81       	ldd	r18, Y+4	; 0x04
     b72:	3d 81       	ldd	r19, Y+5	; 0x05
     b74:	23 34       	cpi	r18, 0x43	; 67
     b76:	31 05       	cpc	r19, r1
     b78:	34 f4       	brge	.+12     	; 0xb86 <setPinDir+0x40>
     b7a:	8c 81       	ldd	r24, Y+4	; 0x04
     b7c:	9d 81       	ldd	r25, Y+5	; 0x05
     b7e:	81 34       	cpi	r24, 0x41	; 65
     b80:	91 05       	cpc	r25, r1
     b82:	71 f0       	breq	.+28     	; 0xba0 <setPinDir+0x5a>
     b84:	bc c0       	rjmp	.+376    	; 0xcfe <setPinDir+0x1b8>
     b86:	2c 81       	ldd	r18, Y+4	; 0x04
     b88:	3d 81       	ldd	r19, Y+5	; 0x05
     b8a:	23 34       	cpi	r18, 0x43	; 67
     b8c:	31 05       	cpc	r19, r1
     b8e:	09 f4       	brne	.+2      	; 0xb92 <setPinDir+0x4c>
     b90:	5f c0       	rjmp	.+190    	; 0xc50 <setPinDir+0x10a>
     b92:	8c 81       	ldd	r24, Y+4	; 0x04
     b94:	9d 81       	ldd	r25, Y+5	; 0x05
     b96:	84 34       	cpi	r24, 0x44	; 68
     b98:	91 05       	cpc	r25, r1
     b9a:	09 f4       	brne	.+2      	; 0xb9e <setPinDir+0x58>
     b9c:	85 c0       	rjmp	.+266    	; 0xca8 <setPinDir+0x162>
     b9e:	af c0       	rjmp	.+350    	; 0xcfe <setPinDir+0x1b8>
	{
		case 'A':
		{
			if (Dir==0)
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	88 23       	and	r24, r24
     ba4:	a9 f4       	brne	.+42     	; 0xbd0 <setPinDir+0x8a>
			{
				CLR_BIT(DDRA,Pin);
     ba6:	aa e3       	ldi	r26, 0x3A	; 58
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	ea e3       	ldi	r30, 0x3A	; 58
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	48 2f       	mov	r20, r24
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	02 2e       	mov	r0, r18
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <setPinDir+0x7e>
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	0a 94       	dec	r0
     bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <setPinDir+0x7a>
     bc8:	80 95       	com	r24
     bca:	84 23       	and	r24, r20
     bcc:	8c 93       	st	X, r24
     bce:	97 c0       	rjmp	.+302    	; 0xcfe <setPinDir+0x1b8>
			}
			else
			{
				SET_BIT(DDRA,Pin);
     bd0:	aa e3       	ldi	r26, 0x3A	; 58
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	ea e3       	ldi	r30, 0x3A	; 58
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	48 2f       	mov	r20, r24
     bdc:	8a 81       	ldd	r24, Y+2	; 0x02
     bde:	28 2f       	mov	r18, r24
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	02 2e       	mov	r0, r18
     be8:	02 c0       	rjmp	.+4      	; 0xbee <setPinDir+0xa8>
     bea:	88 0f       	add	r24, r24
     bec:	99 1f       	adc	r25, r25
     bee:	0a 94       	dec	r0
     bf0:	e2 f7       	brpl	.-8      	; 0xbea <setPinDir+0xa4>
     bf2:	84 2b       	or	r24, r20
     bf4:	8c 93       	st	X, r24
     bf6:	83 c0       	rjmp	.+262    	; 0xcfe <setPinDir+0x1b8>
			}
			break;
		}
		case 'B':
		{
			if (Dir==0)
     bf8:	8b 81       	ldd	r24, Y+3	; 0x03
     bfa:	88 23       	and	r24, r24
     bfc:	a9 f4       	brne	.+42     	; 0xc28 <setPinDir+0xe2>
			{
				CLR_BIT(DDRB,Pin);
     bfe:	a7 e3       	ldi	r26, 0x37	; 55
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e7 e3       	ldi	r30, 0x37	; 55
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	48 2f       	mov	r20, r24
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	28 2f       	mov	r18, r24
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	02 2e       	mov	r0, r18
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <setPinDir+0xd6>
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	0a 94       	dec	r0
     c1e:	e2 f7       	brpl	.-8      	; 0xc18 <setPinDir+0xd2>
     c20:	80 95       	com	r24
     c22:	84 23       	and	r24, r20
     c24:	8c 93       	st	X, r24
     c26:	6b c0       	rjmp	.+214    	; 0xcfe <setPinDir+0x1b8>
			}
			else
			{
				SET_BIT(DDRB,Pin);
     c28:	a7 e3       	ldi	r26, 0x37	; 55
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	e7 e3       	ldi	r30, 0x37	; 55
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	48 2f       	mov	r20, r24
     c34:	8a 81       	ldd	r24, Y+2	; 0x02
     c36:	28 2f       	mov	r18, r24
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	02 2e       	mov	r0, r18
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <setPinDir+0x100>
     c42:	88 0f       	add	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	0a 94       	dec	r0
     c48:	e2 f7       	brpl	.-8      	; 0xc42 <setPinDir+0xfc>
     c4a:	84 2b       	or	r24, r20
     c4c:	8c 93       	st	X, r24
     c4e:	57 c0       	rjmp	.+174    	; 0xcfe <setPinDir+0x1b8>
			}
			break;
		}
		case 'C':
		{
			if (Dir==0)
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	88 23       	and	r24, r24
     c54:	a9 f4       	brne	.+42     	; 0xc80 <setPinDir+0x13a>
			{
				CLR_BIT(DDRC,Pin);
     c56:	a4 e3       	ldi	r26, 0x34	; 52
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e4 e3       	ldi	r30, 0x34	; 52
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	48 2f       	mov	r20, r24
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	02 2e       	mov	r0, r18
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <setPinDir+0x12e>
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	0a 94       	dec	r0
     c76:	e2 f7       	brpl	.-8      	; 0xc70 <setPinDir+0x12a>
     c78:	80 95       	com	r24
     c7a:	84 23       	and	r24, r20
     c7c:	8c 93       	st	X, r24
     c7e:	3f c0       	rjmp	.+126    	; 0xcfe <setPinDir+0x1b8>
			}
			else
			{
				SET_BIT(DDRC,Pin);
     c80:	a4 e3       	ldi	r26, 0x34	; 52
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	e4 e3       	ldi	r30, 0x34	; 52
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	48 2f       	mov	r20, r24
     c8c:	8a 81       	ldd	r24, Y+2	; 0x02
     c8e:	28 2f       	mov	r18, r24
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	02 2e       	mov	r0, r18
     c98:	02 c0       	rjmp	.+4      	; 0xc9e <setPinDir+0x158>
     c9a:	88 0f       	add	r24, r24
     c9c:	99 1f       	adc	r25, r25
     c9e:	0a 94       	dec	r0
     ca0:	e2 f7       	brpl	.-8      	; 0xc9a <setPinDir+0x154>
     ca2:	84 2b       	or	r24, r20
     ca4:	8c 93       	st	X, r24
     ca6:	2b c0       	rjmp	.+86     	; 0xcfe <setPinDir+0x1b8>
			}
			break;
		}
		case 'D':
		{
			if (Dir==0)
     ca8:	8b 81       	ldd	r24, Y+3	; 0x03
     caa:	88 23       	and	r24, r24
     cac:	a9 f4       	brne	.+42     	; 0xcd8 <setPinDir+0x192>
			{
				CLR_BIT(DDRD,Pin);
     cae:	a1 e3       	ldi	r26, 0x31	; 49
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e1 e3       	ldi	r30, 0x31	; 49
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	48 2f       	mov	r20, r24
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	02 2e       	mov	r0, r18
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <setPinDir+0x186>
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	0a 94       	dec	r0
     cce:	e2 f7       	brpl	.-8      	; 0xcc8 <setPinDir+0x182>
     cd0:	80 95       	com	r24
     cd2:	84 23       	and	r24, r20
     cd4:	8c 93       	st	X, r24
     cd6:	13 c0       	rjmp	.+38     	; 0xcfe <setPinDir+0x1b8>
			}
			else
			{
				SET_BIT(DDRD,Pin);
     cd8:	a1 e3       	ldi	r26, 0x31	; 49
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	e1 e3       	ldi	r30, 0x31	; 49
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	48 2f       	mov	r20, r24
     ce4:	8a 81       	ldd	r24, Y+2	; 0x02
     ce6:	28 2f       	mov	r18, r24
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	02 2e       	mov	r0, r18
     cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <setPinDir+0x1b0>
     cf2:	88 0f       	add	r24, r24
     cf4:	99 1f       	adc	r25, r25
     cf6:	0a 94       	dec	r0
     cf8:	e2 f7       	brpl	.-8      	; 0xcf2 <setPinDir+0x1ac>
     cfa:	84 2b       	or	r24, r20
     cfc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <setPinValue>:


void setPinValue(u8 Port, u8 Pin, u8 Val)
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	00 d0       	rcall	.+0      	; 0xd14 <setPinValue+0x6>
     d14:	00 d0       	rcall	.+0      	; 0xd16 <setPinValue+0x8>
     d16:	0f 92       	push	r0
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	89 83       	std	Y+1, r24	; 0x01
     d1e:	6a 83       	std	Y+2, r22	; 0x02
     d20:	4b 83       	std	Y+3, r20	; 0x03
	switch (Port)
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	3d 83       	std	Y+5, r19	; 0x05
     d2a:	2c 83       	std	Y+4, r18	; 0x04
     d2c:	8c 81       	ldd	r24, Y+4	; 0x04
     d2e:	9d 81       	ldd	r25, Y+5	; 0x05
     d30:	82 34       	cpi	r24, 0x42	; 66
     d32:	91 05       	cpc	r25, r1
     d34:	09 f4       	brne	.+2      	; 0xd38 <setPinValue+0x2a>
     d36:	44 c0       	rjmp	.+136    	; 0xdc0 <setPinValue+0xb2>
     d38:	2c 81       	ldd	r18, Y+4	; 0x04
     d3a:	3d 81       	ldd	r19, Y+5	; 0x05
     d3c:	23 34       	cpi	r18, 0x43	; 67
     d3e:	31 05       	cpc	r19, r1
     d40:	34 f4       	brge	.+12     	; 0xd4e <setPinValue+0x40>
     d42:	8c 81       	ldd	r24, Y+4	; 0x04
     d44:	9d 81       	ldd	r25, Y+5	; 0x05
     d46:	81 34       	cpi	r24, 0x41	; 65
     d48:	91 05       	cpc	r25, r1
     d4a:	71 f0       	breq	.+28     	; 0xd68 <setPinValue+0x5a>
     d4c:	bc c0       	rjmp	.+376    	; 0xec6 <setPinValue+0x1b8>
     d4e:	2c 81       	ldd	r18, Y+4	; 0x04
     d50:	3d 81       	ldd	r19, Y+5	; 0x05
     d52:	23 34       	cpi	r18, 0x43	; 67
     d54:	31 05       	cpc	r19, r1
     d56:	09 f4       	brne	.+2      	; 0xd5a <setPinValue+0x4c>
     d58:	5f c0       	rjmp	.+190    	; 0xe18 <setPinValue+0x10a>
     d5a:	8c 81       	ldd	r24, Y+4	; 0x04
     d5c:	9d 81       	ldd	r25, Y+5	; 0x05
     d5e:	84 34       	cpi	r24, 0x44	; 68
     d60:	91 05       	cpc	r25, r1
     d62:	09 f4       	brne	.+2      	; 0xd66 <setPinValue+0x58>
     d64:	85 c0       	rjmp	.+266    	; 0xe70 <setPinValue+0x162>
     d66:	af c0       	rjmp	.+350    	; 0xec6 <setPinValue+0x1b8>
	{
		case 'A':
		{
			if (Val==0)
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	88 23       	and	r24, r24
     d6c:	a9 f4       	brne	.+42     	; 0xd98 <setPinValue+0x8a>
			{
				CLR_BIT(PORTA,Pin);
     d6e:	ab e3       	ldi	r26, 0x3B	; 59
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	eb e3       	ldi	r30, 0x3B	; 59
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	48 2f       	mov	r20, r24
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	02 2e       	mov	r0, r18
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <setPinValue+0x7e>
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	0a 94       	dec	r0
     d8e:	e2 f7       	brpl	.-8      	; 0xd88 <setPinValue+0x7a>
     d90:	80 95       	com	r24
     d92:	84 23       	and	r24, r20
     d94:	8c 93       	st	X, r24
     d96:	97 c0       	rjmp	.+302    	; 0xec6 <setPinValue+0x1b8>
			}
			else
			{
				SET_BIT(PORTA,Pin);
     d98:	ab e3       	ldi	r26, 0x3B	; 59
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	eb e3       	ldi	r30, 0x3B	; 59
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	48 2f       	mov	r20, r24
     da4:	8a 81       	ldd	r24, Y+2	; 0x02
     da6:	28 2f       	mov	r18, r24
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	02 2e       	mov	r0, r18
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <setPinValue+0xa8>
     db2:	88 0f       	add	r24, r24
     db4:	99 1f       	adc	r25, r25
     db6:	0a 94       	dec	r0
     db8:	e2 f7       	brpl	.-8      	; 0xdb2 <setPinValue+0xa4>
     dba:	84 2b       	or	r24, r20
     dbc:	8c 93       	st	X, r24
     dbe:	83 c0       	rjmp	.+262    	; 0xec6 <setPinValue+0x1b8>
			}
			break;
		}
		case 'B':
		{
			if (Val==0)
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	88 23       	and	r24, r24
     dc4:	a9 f4       	brne	.+42     	; 0xdf0 <setPinValue+0xe2>
			{
				CLR_BIT(PORTB,Pin);
     dc6:	a8 e3       	ldi	r26, 0x38	; 56
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e8 e3       	ldi	r30, 0x38	; 56
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	48 2f       	mov	r20, r24
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	02 2e       	mov	r0, r18
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <setPinValue+0xd6>
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	0a 94       	dec	r0
     de6:	e2 f7       	brpl	.-8      	; 0xde0 <setPinValue+0xd2>
     de8:	80 95       	com	r24
     dea:	84 23       	and	r24, r20
     dec:	8c 93       	st	X, r24
     dee:	6b c0       	rjmp	.+214    	; 0xec6 <setPinValue+0x1b8>
			}
			else
			{
				SET_BIT(PORTB,Pin);;
     df0:	a8 e3       	ldi	r26, 0x38	; 56
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e8 e3       	ldi	r30, 0x38	; 56
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	48 2f       	mov	r20, r24
     dfc:	8a 81       	ldd	r24, Y+2	; 0x02
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	02 2e       	mov	r0, r18
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <setPinValue+0x100>
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	0a 94       	dec	r0
     e10:	e2 f7       	brpl	.-8      	; 0xe0a <setPinValue+0xfc>
     e12:	84 2b       	or	r24, r20
     e14:	8c 93       	st	X, r24
     e16:	57 c0       	rjmp	.+174    	; 0xec6 <setPinValue+0x1b8>
			break;
		}
		
		case 'C':
		{
			if (Val==0)
     e18:	8b 81       	ldd	r24, Y+3	; 0x03
     e1a:	88 23       	and	r24, r24
     e1c:	a9 f4       	brne	.+42     	; 0xe48 <setPinValue+0x13a>
			{
				CLR_BIT(PORTC,Pin);
     e1e:	a5 e3       	ldi	r26, 0x35	; 53
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e5 e3       	ldi	r30, 0x35	; 53
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <setPinValue+0x12e>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <setPinValue+0x12a>
     e40:	80 95       	com	r24
     e42:	84 23       	and	r24, r20
     e44:	8c 93       	st	X, r24
     e46:	3f c0       	rjmp	.+126    	; 0xec6 <setPinValue+0x1b8>
			}
			else
			{
				SET_BIT(PORTC,Pin);
     e48:	a5 e3       	ldi	r26, 0x35	; 53
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e5 e3       	ldi	r30, 0x35	; 53
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	48 2f       	mov	r20, r24
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	02 2e       	mov	r0, r18
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <setPinValue+0x158>
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	0a 94       	dec	r0
     e68:	e2 f7       	brpl	.-8      	; 0xe62 <setPinValue+0x154>
     e6a:	84 2b       	or	r24, r20
     e6c:	8c 93       	st	X, r24
     e6e:	2b c0       	rjmp	.+86     	; 0xec6 <setPinValue+0x1b8>
			}
			break;
		}
		case 'D':
		{
			if (Val==0)
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	88 23       	and	r24, r24
     e74:	a9 f4       	brne	.+42     	; 0xea0 <setPinValue+0x192>
			{
				CLR_BIT(PORTD,Pin);
     e76:	a2 e3       	ldi	r26, 0x32	; 50
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e2 e3       	ldi	r30, 0x32	; 50
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 2e       	mov	r0, r18
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <setPinValue+0x186>
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	0a 94       	dec	r0
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <setPinValue+0x182>
     e98:	80 95       	com	r24
     e9a:	84 23       	and	r24, r20
     e9c:	8c 93       	st	X, r24
     e9e:	13 c0       	rjmp	.+38     	; 0xec6 <setPinValue+0x1b8>
			}
			else
			{
				SET_BIT(PORTD,Pin);
     ea0:	a2 e3       	ldi	r26, 0x32	; 50
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e2 e3       	ldi	r30, 0x32	; 50
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	48 2f       	mov	r20, r24
     eac:	8a 81       	ldd	r24, Y+2	; 0x02
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	02 2e       	mov	r0, r18
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <setPinValue+0x1b0>
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	0a 94       	dec	r0
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <setPinValue+0x1ac>
     ec2:	84 2b       	or	r24, r20
     ec4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <getPinValue>:

u8 getPinValue(u8 Port, u8 pin)
{
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	00 d0       	rcall	.+0      	; 0xedc <getPinValue+0x6>
     edc:	00 d0       	rcall	.+0      	; 0xede <getPinValue+0x8>
     ede:	0f 92       	push	r0
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	8a 83       	std	Y+2, r24	; 0x02
     ee6:	6b 83       	std	Y+3, r22	; 0x03
	u8 result;
	
	switch (Port)
     ee8:	8a 81       	ldd	r24, Y+2	; 0x02
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	3d 83       	std	Y+5, r19	; 0x05
     ef0:	2c 83       	std	Y+4, r18	; 0x04
     ef2:	4c 81       	ldd	r20, Y+4	; 0x04
     ef4:	5d 81       	ldd	r21, Y+5	; 0x05
     ef6:	42 34       	cpi	r20, 0x42	; 66
     ef8:	51 05       	cpc	r21, r1
     efa:	41 f1       	breq	.+80     	; 0xf4c <getPinValue+0x76>
     efc:	8c 81       	ldd	r24, Y+4	; 0x04
     efe:	9d 81       	ldd	r25, Y+5	; 0x05
     f00:	83 34       	cpi	r24, 0x43	; 67
     f02:	91 05       	cpc	r25, r1
     f04:	34 f4       	brge	.+12     	; 0xf12 <getPinValue+0x3c>
     f06:	2c 81       	ldd	r18, Y+4	; 0x04
     f08:	3d 81       	ldd	r19, Y+5	; 0x05
     f0a:	21 34       	cpi	r18, 0x41	; 65
     f0c:	31 05       	cpc	r19, r1
     f0e:	61 f0       	breq	.+24     	; 0xf28 <getPinValue+0x52>
     f10:	52 c0       	rjmp	.+164    	; 0xfb6 <getPinValue+0xe0>
     f12:	4c 81       	ldd	r20, Y+4	; 0x04
     f14:	5d 81       	ldd	r21, Y+5	; 0x05
     f16:	43 34       	cpi	r20, 0x43	; 67
     f18:	51 05       	cpc	r21, r1
     f1a:	51 f1       	breq	.+84     	; 0xf70 <getPinValue+0x9a>
     f1c:	8c 81       	ldd	r24, Y+4	; 0x04
     f1e:	9d 81       	ldd	r25, Y+5	; 0x05
     f20:	84 34       	cpi	r24, 0x44	; 68
     f22:	91 05       	cpc	r25, r1
     f24:	b9 f1       	breq	.+110    	; 0xf94 <getPinValue+0xbe>
     f26:	47 c0       	rjmp	.+142    	; 0xfb6 <getPinValue+0xe0>
	{
		case 'A':
		{
			result=GET_BIT(PINA, pin);
     f28:	e9 e3       	ldi	r30, 0x39	; 57
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	8b 81       	ldd	r24, Y+3	; 0x03
     f34:	88 2f       	mov	r24, r24
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	a9 01       	movw	r20, r18
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <getPinValue+0x6a>
     f3c:	55 95       	asr	r21
     f3e:	47 95       	ror	r20
     f40:	8a 95       	dec	r24
     f42:	e2 f7       	brpl	.-8      	; 0xf3c <getPinValue+0x66>
     f44:	ca 01       	movw	r24, r20
     f46:	81 70       	andi	r24, 0x01	; 1
     f48:	89 83       	std	Y+1, r24	; 0x01
     f4a:	35 c0       	rjmp	.+106    	; 0xfb6 <getPinValue+0xe0>
			break;
		}
		case 'B':
		{
			result=GET_BIT(PINB, pin);
     f4c:	e6 e3       	ldi	r30, 0x36	; 54
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	88 2f       	mov	r24, r24
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	a9 01       	movw	r20, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <getPinValue+0x8e>
     f60:	55 95       	asr	r21
     f62:	47 95       	ror	r20
     f64:	8a 95       	dec	r24
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <getPinValue+0x8a>
     f68:	ca 01       	movw	r24, r20
     f6a:	81 70       	andi	r24, 0x01	; 1
     f6c:	89 83       	std	Y+1, r24	; 0x01
     f6e:	23 c0       	rjmp	.+70     	; 0xfb6 <getPinValue+0xe0>
			break;
		}
		
		case 'C':
		{
			result=GET_BIT(PINC, pin);
     f70:	e3 e3       	ldi	r30, 0x33	; 51
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	88 2f       	mov	r24, r24
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	a9 01       	movw	r20, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <getPinValue+0xb2>
     f84:	55 95       	asr	r21
     f86:	47 95       	ror	r20
     f88:	8a 95       	dec	r24
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <getPinValue+0xae>
     f8c:	ca 01       	movw	r24, r20
     f8e:	81 70       	andi	r24, 0x01	; 1
     f90:	89 83       	std	Y+1, r24	; 0x01
     f92:	11 c0       	rjmp	.+34     	; 0xfb6 <getPinValue+0xe0>
			break;
		}
		case 'D':
		{
			result=GET_BIT(PIND, pin);
     f94:	e0 e3       	ldi	r30, 0x30	; 48
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	88 2f       	mov	r24, r24
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	a9 01       	movw	r20, r18
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <getPinValue+0xd6>
     fa8:	55 95       	asr	r21
     faa:	47 95       	ror	r20
     fac:	8a 95       	dec	r24
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <getPinValue+0xd2>
     fb0:	ca 01       	movw	r24, r20
     fb2:	81 70       	andi	r24, 0x01	; 1
     fb4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return result;
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	08 95       	ret

00000fc8 <KEYPAD_GetPressedKey>:
#include "KEYPAD_interface.h"
#include "KEYPAD_config.h"
#include "KEYPAD_private.h"

u8 KEYPAD_GetPressedKey(void)
{
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
     fd0:	61 97       	sbiw	r28, 0x11	; 17
     fd2:	0f b6       	in	r0, 0x3f	; 63
     fd4:	f8 94       	cli
     fd6:	de bf       	out	0x3e, r29	; 62
     fd8:	0f be       	out	0x3f, r0	; 63
     fda:	cd bf       	out	0x3d, r28	; 61
	u8 ROWSCounter=0;
     fdc:	19 8a       	std	Y+17, r1	; 0x11
	u8 COLSCounter=0;
     fde:	18 8a       	std	Y+16, r1	; 0x10
	u8 keypressed = KEYPAD_NOKEYPRESS;
     fe0:	81 ee       	ldi	r24, 0xE1	; 225
     fe2:	8f 87       	std	Y+15, r24	; 0x0f

	//we have to turn every output pin into zero
	//then loop on the input pins to see which one of them is zero(pressed)
	//COLS is output
	//ROWs is input
	for (COLSCounter=0;COLSCounter<KEYPAD_COLSMAXNUM; COLSCounter++)
     fe4:	18 8a       	std	Y+16, r1	; 0x10
     fe6:	cb c0       	rjmp	.+406    	; 0x117e <KEYPAD_GetPressedKey+0x1b6>
	{
		setPinValue(KEYPAD_COLSPortArray[COLSCounter],KEYPAD_COLSPinArray[COLSCounter],0);
     fe8:	88 89       	ldd	r24, Y+16	; 0x10
     fea:	88 2f       	mov	r24, r24
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	fc 01       	movw	r30, r24
     ff0:	e0 58       	subi	r30, 0x80	; 128
     ff2:	ff 4f       	sbci	r31, 0xFF	; 255
     ff4:	20 81       	ld	r18, Z
     ff6:	88 89       	ldd	r24, Y+16	; 0x10
     ff8:	88 2f       	mov	r24, r24
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	fc 01       	movw	r30, r24
     ffe:	e8 58       	subi	r30, 0x88	; 136
    1000:	ff 4f       	sbci	r31, 0xFF	; 255
    1002:	90 81       	ld	r25, Z
    1004:	82 2f       	mov	r24, r18
    1006:	69 2f       	mov	r22, r25
    1008:	40 e0       	ldi	r20, 0x00	; 0
    100a:	0e 94 87 06 	call	0xd0e	; 0xd0e <setPinValue>
		for (ROWSCounter=0;ROWSCounter<KEYPAD_ROWSMAXNUM; ROWSCounter++)
    100e:	19 8a       	std	Y+17, r1	; 0x11
    1010:	9c c0       	rjmp	.+312    	; 0x114a <KEYPAD_GetPressedKey+0x182>
		{
			if(getPinValue(KEYPAD_ROWSPortArray[ROWSCounter],KEYPAD_ROWSPinArray[ROWSCounter])==0)
    1012:	89 89       	ldd	r24, Y+17	; 0x11
    1014:	88 2f       	mov	r24, r24
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	fc 01       	movw	r30, r24
    101a:	ec 57       	subi	r30, 0x7C	; 124
    101c:	ff 4f       	sbci	r31, 0xFF	; 255
    101e:	20 81       	ld	r18, Z
    1020:	89 89       	ldd	r24, Y+17	; 0x11
    1022:	88 2f       	mov	r24, r24
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	fc 01       	movw	r30, r24
    1028:	e4 58       	subi	r30, 0x84	; 132
    102a:	ff 4f       	sbci	r31, 0xFF	; 255
    102c:	90 81       	ld	r25, Z
    102e:	82 2f       	mov	r24, r18
    1030:	69 2f       	mov	r22, r25
    1032:	0e 94 6b 07 	call	0xed6	; 0xed6 <getPinValue>
    1036:	88 23       	and	r24, r24
    1038:	09 f0       	breq	.+2      	; 0x103c <KEYPAD_GetPressedKey+0x74>
    103a:	84 c0       	rjmp	.+264    	; 0x1144 <KEYPAD_GetPressedKey+0x17c>
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	aa e7       	ldi	r26, 0x7A	; 122
    1042:	b4 e4       	ldi	r27, 0x44	; 68
    1044:	8b 87       	std	Y+11, r24	; 0x0b
    1046:	9c 87       	std	Y+12, r25	; 0x0c
    1048:	ad 87       	std	Y+13, r26	; 0x0d
    104a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    104c:	6b 85       	ldd	r22, Y+11	; 0x0b
    104e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1050:	8d 85       	ldd	r24, Y+13	; 0x0d
    1052:	9e 85       	ldd	r25, Y+14	; 0x0e
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	48 e4       	ldi	r20, 0x48	; 72
    105a:	53 e4       	ldi	r21, 0x43	; 67
    105c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	8f 83       	std	Y+7, r24	; 0x07
    1066:	98 87       	std	Y+8, r25	; 0x08
    1068:	a9 87       	std	Y+9, r26	; 0x09
    106a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    106c:	6f 81       	ldd	r22, Y+7	; 0x07
    106e:	78 85       	ldd	r23, Y+8	; 0x08
    1070:	89 85       	ldd	r24, Y+9	; 0x09
    1072:	9a 85       	ldd	r25, Y+10	; 0x0a
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	40 e8       	ldi	r20, 0x80	; 128
    107a:	5f e3       	ldi	r21, 0x3F	; 63
    107c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1080:	88 23       	and	r24, r24
    1082:	2c f4       	brge	.+10     	; 0x108e <KEYPAD_GetPressedKey+0xc6>
		__ticks = 1;
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	9e 83       	std	Y+6, r25	; 0x06
    108a:	8d 83       	std	Y+5, r24	; 0x05
    108c:	3f c0       	rjmp	.+126    	; 0x110c <KEYPAD_GetPressedKey+0x144>
	else if (__tmp > 65535)
    108e:	6f 81       	ldd	r22, Y+7	; 0x07
    1090:	78 85       	ldd	r23, Y+8	; 0x08
    1092:	89 85       	ldd	r24, Y+9	; 0x09
    1094:	9a 85       	ldd	r25, Y+10	; 0x0a
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	3f ef       	ldi	r19, 0xFF	; 255
    109a:	4f e7       	ldi	r20, 0x7F	; 127
    109c:	57 e4       	ldi	r21, 0x47	; 71
    109e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10a2:	18 16       	cp	r1, r24
    10a4:	4c f5       	brge	.+82     	; 0x10f8 <KEYPAD_GetPressedKey+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    10a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    10aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	40 e2       	ldi	r20, 0x20	; 32
    10b4:	51 e4       	ldi	r21, 0x41	; 65
    10b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ba:	dc 01       	movw	r26, r24
    10bc:	cb 01       	movw	r24, r22
    10be:	bc 01       	movw	r22, r24
    10c0:	cd 01       	movw	r24, r26
    10c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c6:	dc 01       	movw	r26, r24
    10c8:	cb 01       	movw	r24, r22
    10ca:	9e 83       	std	Y+6, r25	; 0x06
    10cc:	8d 83       	std	Y+5, r24	; 0x05
    10ce:	0f c0       	rjmp	.+30     	; 0x10ee <KEYPAD_GetPressedKey+0x126>
    10d0:	84 e1       	ldi	r24, 0x14	; 20
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	9c 83       	std	Y+4, r25	; 0x04
    10d6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	9c 81       	ldd	r25, Y+4	; 0x04
    10dc:	01 97       	sbiw	r24, 0x01	; 1
    10de:	f1 f7       	brne	.-4      	; 0x10dc <KEYPAD_GetPressedKey+0x114>
    10e0:	9c 83       	std	Y+4, r25	; 0x04
    10e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e4:	8d 81       	ldd	r24, Y+5	; 0x05
    10e6:	9e 81       	ldd	r25, Y+6	; 0x06
    10e8:	01 97       	sbiw	r24, 0x01	; 1
    10ea:	9e 83       	std	Y+6, r25	; 0x06
    10ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ee:	8d 81       	ldd	r24, Y+5	; 0x05
    10f0:	9e 81       	ldd	r25, Y+6	; 0x06
    10f2:	00 97       	sbiw	r24, 0x00	; 0
    10f4:	69 f7       	brne	.-38     	; 0x10d0 <KEYPAD_GetPressedKey+0x108>
    10f6:	14 c0       	rjmp	.+40     	; 0x1120 <KEYPAD_GetPressedKey+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f8:	6f 81       	ldd	r22, Y+7	; 0x07
    10fa:	78 85       	ldd	r23, Y+8	; 0x08
    10fc:	89 85       	ldd	r24, Y+9	; 0x09
    10fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	9e 83       	std	Y+6, r25	; 0x06
    110a:	8d 83       	std	Y+5, r24	; 0x05
    110c:	8d 81       	ldd	r24, Y+5	; 0x05
    110e:	9e 81       	ldd	r25, Y+6	; 0x06
    1110:	9a 83       	std	Y+2, r25	; 0x02
    1112:	89 83       	std	Y+1, r24	; 0x01
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	9a 81       	ldd	r25, Y+2	; 0x02
    1118:	01 97       	sbiw	r24, 0x01	; 1
    111a:	f1 f7       	brne	.-4      	; 0x1118 <KEYPAD_GetPressedKey+0x150>
    111c:	9a 83       	std	Y+2, r25	; 0x02
    111e:	89 83       	std	Y+1, r24	; 0x01
				{
				_delay_ms(1000);
				keypressed=KeysArray[ROWSCounter][COLSCounter];
    1120:	89 89       	ldd	r24, Y+17	; 0x11
    1122:	48 2f       	mov	r20, r24
    1124:	50 e0       	ldi	r21, 0x00	; 0
    1126:	88 89       	ldd	r24, Y+16	; 0x10
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	ca 01       	movw	r24, r20
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	82 0f       	add	r24, r18
    1138:	93 1f       	adc	r25, r19
    113a:	fc 01       	movw	r30, r24
    113c:	e8 59       	subi	r30, 0x98	; 152
    113e:	ff 4f       	sbci	r31, 0xFF	; 255
    1140:	80 81       	ld	r24, Z
    1142:	8f 87       	std	Y+15, r24	; 0x0f
	//COLS is output
	//ROWs is input
	for (COLSCounter=0;COLSCounter<KEYPAD_COLSMAXNUM; COLSCounter++)
	{
		setPinValue(KEYPAD_COLSPortArray[COLSCounter],KEYPAD_COLSPinArray[COLSCounter],0);
		for (ROWSCounter=0;ROWSCounter<KEYPAD_ROWSMAXNUM; ROWSCounter++)
    1144:	89 89       	ldd	r24, Y+17	; 0x11
    1146:	8f 5f       	subi	r24, 0xFF	; 255
    1148:	89 8b       	std	Y+17, r24	; 0x11
    114a:	89 89       	ldd	r24, Y+17	; 0x11
    114c:	84 30       	cpi	r24, 0x04	; 4
    114e:	08 f4       	brcc	.+2      	; 0x1152 <KEYPAD_GetPressedKey+0x18a>
    1150:	60 cf       	rjmp	.-320    	; 0x1012 <KEYPAD_GetPressedKey+0x4a>
				{
				_delay_ms(1000);
				keypressed=KeysArray[ROWSCounter][COLSCounter];
				}
		}
		setPinValue(KEYPAD_COLSPortArray[COLSCounter],KEYPAD_COLSPinArray[COLSCounter],1);
    1152:	88 89       	ldd	r24, Y+16	; 0x10
    1154:	88 2f       	mov	r24, r24
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	fc 01       	movw	r30, r24
    115a:	e0 58       	subi	r30, 0x80	; 128
    115c:	ff 4f       	sbci	r31, 0xFF	; 255
    115e:	20 81       	ld	r18, Z
    1160:	88 89       	ldd	r24, Y+16	; 0x10
    1162:	88 2f       	mov	r24, r24
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	fc 01       	movw	r30, r24
    1168:	e8 58       	subi	r30, 0x88	; 136
    116a:	ff 4f       	sbci	r31, 0xFF	; 255
    116c:	90 81       	ld	r25, Z
    116e:	82 2f       	mov	r24, r18
    1170:	69 2f       	mov	r22, r25
    1172:	41 e0       	ldi	r20, 0x01	; 1
    1174:	0e 94 87 06 	call	0xd0e	; 0xd0e <setPinValue>

	//we have to turn every output pin into zero
	//then loop on the input pins to see which one of them is zero(pressed)
	//COLS is output
	//ROWs is input
	for (COLSCounter=0;COLSCounter<KEYPAD_COLSMAXNUM; COLSCounter++)
    1178:	88 89       	ldd	r24, Y+16	; 0x10
    117a:	8f 5f       	subi	r24, 0xFF	; 255
    117c:	88 8b       	std	Y+16, r24	; 0x10
    117e:	88 89       	ldd	r24, Y+16	; 0x10
    1180:	84 30       	cpi	r24, 0x04	; 4
    1182:	08 f4       	brcc	.+2      	; 0x1186 <KEYPAD_GetPressedKey+0x1be>
    1184:	31 cf       	rjmp	.-414    	; 0xfe8 <KEYPAD_GetPressedKey+0x20>
				keypressed=KeysArray[ROWSCounter][COLSCounter];
				}
		}
		setPinValue(KEYPAD_COLSPortArray[COLSCounter],KEYPAD_COLSPinArray[COLSCounter],1);
	}
	return keypressed;
    1186:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1188:	61 96       	adiw	r28, 0x11	; 17
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <CLCD_voidInitialize>:

#include"LCD_config.h"
#include"LCD_interface.h"
#include<util/delay.h>
void CLCD_voidInitialize(void)
{
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	6c 97       	sbiw	r28, 0x1c	; 28
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	cd bf       	out	0x3d, r28	; 61
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	a0 e2       	ldi	r26, 0x20	; 32
    11b4:	b2 e4       	ldi	r27, 0x42	; 66
    11b6:	89 8f       	std	Y+25, r24	; 0x19
    11b8:	9a 8f       	std	Y+26, r25	; 0x1a
    11ba:	ab 8f       	std	Y+27, r26	; 0x1b
    11bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11be:	69 8d       	ldd	r22, Y+25	; 0x19
    11c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	48 e4       	ldi	r20, 0x48	; 72
    11cc:	53 e4       	ldi	r21, 0x43	; 67
    11ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d2:	dc 01       	movw	r26, r24
    11d4:	cb 01       	movw	r24, r22
    11d6:	8d 8b       	std	Y+21, r24	; 0x15
    11d8:	9e 8b       	std	Y+22, r25	; 0x16
    11da:	af 8b       	std	Y+23, r26	; 0x17
    11dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11de:	6d 89       	ldd	r22, Y+21	; 0x15
    11e0:	7e 89       	ldd	r23, Y+22	; 0x16
    11e2:	8f 89       	ldd	r24, Y+23	; 0x17
    11e4:	98 8d       	ldd	r25, Y+24	; 0x18
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	40 e8       	ldi	r20, 0x80	; 128
    11ec:	5f e3       	ldi	r21, 0x3F	; 63
    11ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11f2:	88 23       	and	r24, r24
    11f4:	2c f4       	brge	.+10     	; 0x1200 <CLCD_voidInitialize+0x66>
		__ticks = 1;
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	9c 8b       	std	Y+20, r25	; 0x14
    11fc:	8b 8b       	std	Y+19, r24	; 0x13
    11fe:	3f c0       	rjmp	.+126    	; 0x127e <CLCD_voidInitialize+0xe4>
	else if (__tmp > 65535)
    1200:	6d 89       	ldd	r22, Y+21	; 0x15
    1202:	7e 89       	ldd	r23, Y+22	; 0x16
    1204:	8f 89       	ldd	r24, Y+23	; 0x17
    1206:	98 8d       	ldd	r25, Y+24	; 0x18
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	3f ef       	ldi	r19, 0xFF	; 255
    120c:	4f e7       	ldi	r20, 0x7F	; 127
    120e:	57 e4       	ldi	r21, 0x47	; 71
    1210:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1214:	18 16       	cp	r1, r24
    1216:	4c f5       	brge	.+82     	; 0x126a <CLCD_voidInitialize+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1218:	69 8d       	ldd	r22, Y+25	; 0x19
    121a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    121c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    121e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	40 e2       	ldi	r20, 0x20	; 32
    1226:	51 e4       	ldi	r21, 0x41	; 65
    1228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	bc 01       	movw	r22, r24
    1232:	cd 01       	movw	r24, r26
    1234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1238:	dc 01       	movw	r26, r24
    123a:	cb 01       	movw	r24, r22
    123c:	9c 8b       	std	Y+20, r25	; 0x14
    123e:	8b 8b       	std	Y+19, r24	; 0x13
    1240:	0f c0       	rjmp	.+30     	; 0x1260 <CLCD_voidInitialize+0xc6>
    1242:	84 e1       	ldi	r24, 0x14	; 20
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	9a 8b       	std	Y+18, r25	; 0x12
    1248:	89 8b       	std	Y+17, r24	; 0x11
    124a:	89 89       	ldd	r24, Y+17	; 0x11
    124c:	9a 89       	ldd	r25, Y+18	; 0x12
    124e:	01 97       	sbiw	r24, 0x01	; 1
    1250:	f1 f7       	brne	.-4      	; 0x124e <CLCD_voidInitialize+0xb4>
    1252:	9a 8b       	std	Y+18, r25	; 0x12
    1254:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1256:	8b 89       	ldd	r24, Y+19	; 0x13
    1258:	9c 89       	ldd	r25, Y+20	; 0x14
    125a:	01 97       	sbiw	r24, 0x01	; 1
    125c:	9c 8b       	std	Y+20, r25	; 0x14
    125e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1260:	8b 89       	ldd	r24, Y+19	; 0x13
    1262:	9c 89       	ldd	r25, Y+20	; 0x14
    1264:	00 97       	sbiw	r24, 0x00	; 0
    1266:	69 f7       	brne	.-38     	; 0x1242 <CLCD_voidInitialize+0xa8>
    1268:	14 c0       	rjmp	.+40     	; 0x1292 <CLCD_voidInitialize+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    126a:	6d 89       	ldd	r22, Y+21	; 0x15
    126c:	7e 89       	ldd	r23, Y+22	; 0x16
    126e:	8f 89       	ldd	r24, Y+23	; 0x17
    1270:	98 8d       	ldd	r25, Y+24	; 0x18
    1272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1276:	dc 01       	movw	r26, r24
    1278:	cb 01       	movw	r24, r22
    127a:	9c 8b       	std	Y+20, r25	; 0x14
    127c:	8b 8b       	std	Y+19, r24	; 0x13
    127e:	8b 89       	ldd	r24, Y+19	; 0x13
    1280:	9c 89       	ldd	r25, Y+20	; 0x14
    1282:	98 8b       	std	Y+16, r25	; 0x10
    1284:	8f 87       	std	Y+15, r24	; 0x0f
    1286:	8f 85       	ldd	r24, Y+15	; 0x0f
    1288:	98 89       	ldd	r25, Y+16	; 0x10
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	f1 f7       	brne	.-4      	; 0x128a <CLCD_voidInitialize+0xf0>
    128e:	98 8b       	std	Y+16, r25	; 0x10
    1290:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(40);

	/**/
	//  setPinValue(CLCD_u8_E_PORT,CLCD_u8_E_PIN,0);

	CLCD_voidWriteCmd(0b00111000);
    1292:	88 e3       	ldi	r24, 0x38	; 56
    1294:	0e 94 38 0b 	call	0x1670	; 0x1670 <CLCD_voidWriteCmd>
	CLCD_voidWriteCmd(0b00001100);
    1298:	8c e0       	ldi	r24, 0x0C	; 12
    129a:	0e 94 38 0b 	call	0x1670	; 0x1670 <CLCD_voidWriteCmd>
	CLCD_voidWriteCmd(0b00000001);
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	0e 94 38 0b 	call	0x1670	; 0x1670 <CLCD_voidWriteCmd>
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	a0 e0       	ldi	r26, 0x00	; 0
    12aa:	b0 e4       	ldi	r27, 0x40	; 64
    12ac:	8b 87       	std	Y+11, r24	; 0x0b
    12ae:	9c 87       	std	Y+12, r25	; 0x0c
    12b0:	ad 87       	std	Y+13, r26	; 0x0d
    12b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    12b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    12b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	48 e4       	ldi	r20, 0x48	; 72
    12c2:	53 e4       	ldi	r21, 0x43	; 67
    12c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c8:	dc 01       	movw	r26, r24
    12ca:	cb 01       	movw	r24, r22
    12cc:	8f 83       	std	Y+7, r24	; 0x07
    12ce:	98 87       	std	Y+8, r25	; 0x08
    12d0:	a9 87       	std	Y+9, r26	; 0x09
    12d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12d4:	6f 81       	ldd	r22, Y+7	; 0x07
    12d6:	78 85       	ldd	r23, Y+8	; 0x08
    12d8:	89 85       	ldd	r24, Y+9	; 0x09
    12da:	9a 85       	ldd	r25, Y+10	; 0x0a
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	40 e8       	ldi	r20, 0x80	; 128
    12e2:	5f e3       	ldi	r21, 0x3F	; 63
    12e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12e8:	88 23       	and	r24, r24
    12ea:	2c f4       	brge	.+10     	; 0x12f6 <CLCD_voidInitialize+0x15c>
		__ticks = 1;
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	9e 83       	std	Y+6, r25	; 0x06
    12f2:	8d 83       	std	Y+5, r24	; 0x05
    12f4:	3f c0       	rjmp	.+126    	; 0x1374 <CLCD_voidInitialize+0x1da>
	else if (__tmp > 65535)
    12f6:	6f 81       	ldd	r22, Y+7	; 0x07
    12f8:	78 85       	ldd	r23, Y+8	; 0x08
    12fa:	89 85       	ldd	r24, Y+9	; 0x09
    12fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	3f ef       	ldi	r19, 0xFF	; 255
    1302:	4f e7       	ldi	r20, 0x7F	; 127
    1304:	57 e4       	ldi	r21, 0x47	; 71
    1306:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    130a:	18 16       	cp	r1, r24
    130c:	4c f5       	brge	.+82     	; 0x1360 <CLCD_voidInitialize+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    130e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1310:	7c 85       	ldd	r23, Y+12	; 0x0c
    1312:	8d 85       	ldd	r24, Y+13	; 0x0d
    1314:	9e 85       	ldd	r25, Y+14	; 0x0e
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	40 e2       	ldi	r20, 0x20	; 32
    131c:	51 e4       	ldi	r21, 0x41	; 65
    131e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	bc 01       	movw	r22, r24
    1328:	cd 01       	movw	r24, r26
    132a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    132e:	dc 01       	movw	r26, r24
    1330:	cb 01       	movw	r24, r22
    1332:	9e 83       	std	Y+6, r25	; 0x06
    1334:	8d 83       	std	Y+5, r24	; 0x05
    1336:	0f c0       	rjmp	.+30     	; 0x1356 <CLCD_voidInitialize+0x1bc>
    1338:	84 e1       	ldi	r24, 0x14	; 20
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	9c 83       	std	Y+4, r25	; 0x04
    133e:	8b 83       	std	Y+3, r24	; 0x03
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	9c 81       	ldd	r25, Y+4	; 0x04
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	f1 f7       	brne	.-4      	; 0x1344 <CLCD_voidInitialize+0x1aa>
    1348:	9c 83       	std	Y+4, r25	; 0x04
    134a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    134c:	8d 81       	ldd	r24, Y+5	; 0x05
    134e:	9e 81       	ldd	r25, Y+6	; 0x06
    1350:	01 97       	sbiw	r24, 0x01	; 1
    1352:	9e 83       	std	Y+6, r25	; 0x06
    1354:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1356:	8d 81       	ldd	r24, Y+5	; 0x05
    1358:	9e 81       	ldd	r25, Y+6	; 0x06
    135a:	00 97       	sbiw	r24, 0x00	; 0
    135c:	69 f7       	brne	.-38     	; 0x1338 <CLCD_voidInitialize+0x19e>
    135e:	14 c0       	rjmp	.+40     	; 0x1388 <CLCD_voidInitialize+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1360:	6f 81       	ldd	r22, Y+7	; 0x07
    1362:	78 85       	ldd	r23, Y+8	; 0x08
    1364:	89 85       	ldd	r24, Y+9	; 0x09
    1366:	9a 85       	ldd	r25, Y+10	; 0x0a
    1368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	9e 83       	std	Y+6, r25	; 0x06
    1372:	8d 83       	std	Y+5, r24	; 0x05
    1374:	8d 81       	ldd	r24, Y+5	; 0x05
    1376:	9e 81       	ldd	r25, Y+6	; 0x06
    1378:	9a 83       	std	Y+2, r25	; 0x02
    137a:	89 83       	std	Y+1, r24	; 0x01
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	9a 81       	ldd	r25, Y+2	; 0x02
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	f1 f7       	brne	.-4      	; 0x1380 <CLCD_voidInitialize+0x1e6>
    1384:	9a 83       	std	Y+2, r25	; 0x02
    1386:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);
}
    1388:	6c 96       	adiw	r28, 0x1c	; 28
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	cd bf       	out	0x3d, r28	; 61
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <CLCD_voidWriteData>:

/*Description : This API shall display data on LCD */
void CLCD_voidWriteData(u8 copy_u8Data)
{
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
    13a2:	6d 97       	sbiw	r28, 0x1d	; 29
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	f8 94       	cli
    13a8:	de bf       	out	0x3e, r29	; 62
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	cd bf       	out	0x3d, r28	; 61
    13ae:	8d 8f       	std	Y+29, r24	; 0x1d
  /* Set RS = 1 */
	setPinValue(CLCD_u8_RS_PORT,CLCD_u8_RS_PIN, 1);
    13b0:	84 e4       	ldi	r24, 0x44	; 68
    13b2:	60 e0       	ldi	r22, 0x00	; 0
    13b4:	41 e0       	ldi	r20, 0x01	; 1
    13b6:	0e 94 87 06 	call	0xd0e	; 0xd0e <setPinValue>
  
  /* Set RW = 0 */
	setPinValue(CLCD_u8_RW_PORT,CLCD_u8_RW_PIN, 0);
    13ba:	84 e4       	ldi	r24, 0x44	; 68
    13bc:	61 e0       	ldi	r22, 0x01	; 1
    13be:	40 e0       	ldi	r20, 0x00	; 0
    13c0:	0e 94 87 06 	call	0xd0e	; 0xd0e <setPinValue>
  
  /* Set Data on Data Port */
  CLCD_voidSetDataPort(copy_u8Data);
    13c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13c6:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <CLCD_voidSetDataPort>
  
  /* Enable Pulse */
  setPinValue(CLCD_u8_E_PORT,CLCD_u8_E_PIN,1);
    13ca:	84 e4       	ldi	r24, 0x44	; 68
    13cc:	62 e0       	ldi	r22, 0x02	; 2
    13ce:	41 e0       	ldi	r20, 0x01	; 1
    13d0:	0e 94 87 06 	call	0xd0e	; 0xd0e <setPinValue>
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	a0 e8       	ldi	r26, 0x80	; 128
    13da:	bf e3       	ldi	r27, 0x3F	; 63
    13dc:	89 8f       	std	Y+25, r24	; 0x19
    13de:	9a 8f       	std	Y+26, r25	; 0x1a
    13e0:	ab 8f       	std	Y+27, r26	; 0x1b
    13e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13e4:	69 8d       	ldd	r22, Y+25	; 0x19
    13e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	48 e4       	ldi	r20, 0x48	; 72
    13f2:	53 e4       	ldi	r21, 0x43	; 67
    13f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	8d 8b       	std	Y+21, r24	; 0x15
    13fe:	9e 8b       	std	Y+22, r25	; 0x16
    1400:	af 8b       	std	Y+23, r26	; 0x17
    1402:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1404:	6d 89       	ldd	r22, Y+21	; 0x15
    1406:	7e 89       	ldd	r23, Y+22	; 0x16
    1408:	8f 89       	ldd	r24, Y+23	; 0x17
    140a:	98 8d       	ldd	r25, Y+24	; 0x18
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	40 e8       	ldi	r20, 0x80	; 128
    1412:	5f e3       	ldi	r21, 0x3F	; 63
    1414:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1418:	88 23       	and	r24, r24
    141a:	2c f4       	brge	.+10     	; 0x1426 <CLCD_voidWriteData+0x8c>
		__ticks = 1;
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	9c 8b       	std	Y+20, r25	; 0x14
    1422:	8b 8b       	std	Y+19, r24	; 0x13
    1424:	3f c0       	rjmp	.+126    	; 0x14a4 <CLCD_voidWriteData+0x10a>
	else if (__tmp > 65535)
    1426:	6d 89       	ldd	r22, Y+21	; 0x15
    1428:	7e 89       	ldd	r23, Y+22	; 0x16
    142a:	8f 89       	ldd	r24, Y+23	; 0x17
    142c:	98 8d       	ldd	r25, Y+24	; 0x18
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	3f ef       	ldi	r19, 0xFF	; 255
    1432:	4f e7       	ldi	r20, 0x7F	; 127
    1434:	57 e4       	ldi	r21, 0x47	; 71
    1436:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    143a:	18 16       	cp	r1, r24
    143c:	4c f5       	brge	.+82     	; 0x1490 <CLCD_voidWriteData+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    143e:	69 8d       	ldd	r22, Y+25	; 0x19
    1440:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1442:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1444:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	40 e2       	ldi	r20, 0x20	; 32
    144c:	51 e4       	ldi	r21, 0x41	; 65
    144e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	bc 01       	movw	r22, r24
    1458:	cd 01       	movw	r24, r26
    145a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	9c 8b       	std	Y+20, r25	; 0x14
    1464:	8b 8b       	std	Y+19, r24	; 0x13
    1466:	0f c0       	rjmp	.+30     	; 0x1486 <CLCD_voidWriteData+0xec>
    1468:	84 e1       	ldi	r24, 0x14	; 20
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	9a 8b       	std	Y+18, r25	; 0x12
    146e:	89 8b       	std	Y+17, r24	; 0x11
    1470:	89 89       	ldd	r24, Y+17	; 0x11
    1472:	9a 89       	ldd	r25, Y+18	; 0x12
    1474:	01 97       	sbiw	r24, 0x01	; 1
    1476:	f1 f7       	brne	.-4      	; 0x1474 <CLCD_voidWriteData+0xda>
    1478:	9a 8b       	std	Y+18, r25	; 0x12
    147a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    147c:	8b 89       	ldd	r24, Y+19	; 0x13
    147e:	9c 89       	ldd	r25, Y+20	; 0x14
    1480:	01 97       	sbiw	r24, 0x01	; 1
    1482:	9c 8b       	std	Y+20, r25	; 0x14
    1484:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1486:	8b 89       	ldd	r24, Y+19	; 0x13
    1488:	9c 89       	ldd	r25, Y+20	; 0x14
    148a:	00 97       	sbiw	r24, 0x00	; 0
    148c:	69 f7       	brne	.-38     	; 0x1468 <CLCD_voidWriteData+0xce>
    148e:	14 c0       	rjmp	.+40     	; 0x14b8 <CLCD_voidWriteData+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1490:	6d 89       	ldd	r22, Y+21	; 0x15
    1492:	7e 89       	ldd	r23, Y+22	; 0x16
    1494:	8f 89       	ldd	r24, Y+23	; 0x17
    1496:	98 8d       	ldd	r25, Y+24	; 0x18
    1498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	9c 8b       	std	Y+20, r25	; 0x14
    14a2:	8b 8b       	std	Y+19, r24	; 0x13
    14a4:	8b 89       	ldd	r24, Y+19	; 0x13
    14a6:	9c 89       	ldd	r25, Y+20	; 0x14
    14a8:	98 8b       	std	Y+16, r25	; 0x10
    14aa:	8f 87       	std	Y+15, r24	; 0x0f
    14ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    14ae:	98 89       	ldd	r25, Y+16	; 0x10
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	f1 f7       	brne	.-4      	; 0x14b0 <CLCD_voidWriteData+0x116>
    14b4:	98 8b       	std	Y+16, r25	; 0x10
    14b6:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(1);
  setPinValue(CLCD_u8_E_PORT,CLCD_u8_E_PIN,0);
    14b8:	84 e4       	ldi	r24, 0x44	; 68
    14ba:	62 e0       	ldi	r22, 0x02	; 2
    14bc:	40 e0       	ldi	r20, 0x00	; 0
    14be:	0e 94 87 06 	call	0xd0e	; 0xd0e <setPinValue>
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	a0 e8       	ldi	r26, 0x80	; 128
    14c8:	bf e3       	ldi	r27, 0x3F	; 63
    14ca:	8b 87       	std	Y+11, r24	; 0x0b
    14cc:	9c 87       	std	Y+12, r25	; 0x0c
    14ce:	ad 87       	std	Y+13, r26	; 0x0d
    14d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    14d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    14d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	48 e4       	ldi	r20, 0x48	; 72
    14e0:	53 e4       	ldi	r21, 0x43	; 67
    14e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	8f 83       	std	Y+7, r24	; 0x07
    14ec:	98 87       	std	Y+8, r25	; 0x08
    14ee:	a9 87       	std	Y+9, r26	; 0x09
    14f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14f2:	6f 81       	ldd	r22, Y+7	; 0x07
    14f4:	78 85       	ldd	r23, Y+8	; 0x08
    14f6:	89 85       	ldd	r24, Y+9	; 0x09
    14f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	40 e8       	ldi	r20, 0x80	; 128
    1500:	5f e3       	ldi	r21, 0x3F	; 63
    1502:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1506:	88 23       	and	r24, r24
    1508:	2c f4       	brge	.+10     	; 0x1514 <CLCD_voidWriteData+0x17a>
		__ticks = 1;
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	9e 83       	std	Y+6, r25	; 0x06
    1510:	8d 83       	std	Y+5, r24	; 0x05
    1512:	3f c0       	rjmp	.+126    	; 0x1592 <CLCD_voidWriteData+0x1f8>
	else if (__tmp > 65535)
    1514:	6f 81       	ldd	r22, Y+7	; 0x07
    1516:	78 85       	ldd	r23, Y+8	; 0x08
    1518:	89 85       	ldd	r24, Y+9	; 0x09
    151a:	9a 85       	ldd	r25, Y+10	; 0x0a
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	3f ef       	ldi	r19, 0xFF	; 255
    1520:	4f e7       	ldi	r20, 0x7F	; 127
    1522:	57 e4       	ldi	r21, 0x47	; 71
    1524:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1528:	18 16       	cp	r1, r24
    152a:	4c f5       	brge	.+82     	; 0x157e <CLCD_voidWriteData+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    152c:	6b 85       	ldd	r22, Y+11	; 0x0b
    152e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1530:	8d 85       	ldd	r24, Y+13	; 0x0d
    1532:	9e 85       	ldd	r25, Y+14	; 0x0e
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	40 e2       	ldi	r20, 0x20	; 32
    153a:	51 e4       	ldi	r21, 0x41	; 65
    153c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	bc 01       	movw	r22, r24
    1546:	cd 01       	movw	r24, r26
    1548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	9e 83       	std	Y+6, r25	; 0x06
    1552:	8d 83       	std	Y+5, r24	; 0x05
    1554:	0f c0       	rjmp	.+30     	; 0x1574 <CLCD_voidWriteData+0x1da>
    1556:	84 e1       	ldi	r24, 0x14	; 20
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	9c 83       	std	Y+4, r25	; 0x04
    155c:	8b 83       	std	Y+3, r24	; 0x03
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	9c 81       	ldd	r25, Y+4	; 0x04
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	f1 f7       	brne	.-4      	; 0x1562 <CLCD_voidWriteData+0x1c8>
    1566:	9c 83       	std	Y+4, r25	; 0x04
    1568:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    156a:	8d 81       	ldd	r24, Y+5	; 0x05
    156c:	9e 81       	ldd	r25, Y+6	; 0x06
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	9e 83       	std	Y+6, r25	; 0x06
    1572:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1574:	8d 81       	ldd	r24, Y+5	; 0x05
    1576:	9e 81       	ldd	r25, Y+6	; 0x06
    1578:	00 97       	sbiw	r24, 0x00	; 0
    157a:	69 f7       	brne	.-38     	; 0x1556 <CLCD_voidWriteData+0x1bc>
    157c:	14 c0       	rjmp	.+40     	; 0x15a6 <CLCD_voidWriteData+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    157e:	6f 81       	ldd	r22, Y+7	; 0x07
    1580:	78 85       	ldd	r23, Y+8	; 0x08
    1582:	89 85       	ldd	r24, Y+9	; 0x09
    1584:	9a 85       	ldd	r25, Y+10	; 0x0a
    1586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	9e 83       	std	Y+6, r25	; 0x06
    1590:	8d 83       	std	Y+5, r24	; 0x05
    1592:	8d 81       	ldd	r24, Y+5	; 0x05
    1594:	9e 81       	ldd	r25, Y+6	; 0x06
    1596:	9a 83       	std	Y+2, r25	; 0x02
    1598:	89 83       	std	Y+1, r24	; 0x01
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	9a 81       	ldd	r25, Y+2	; 0x02
    159e:	01 97       	sbiw	r24, 0x01	; 1
    15a0:	f1 f7       	brne	.-4      	; 0x159e <CLCD_voidWriteData+0x204>
    15a2:	9a 83       	std	Y+2, r25	; 0x02
    15a4:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
  
}
    15a6:	6d 96       	adiw	r28, 0x1d	; 29
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	cd bf       	out	0x3d, r28	; 61
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	08 95       	ret

000015b8 <CLCD_voidSetDataPort>:

void CLCD_voidSetDataPort(u8 Copy_u8Data)
{
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	00 d0       	rcall	.+0      	; 0x15be <CLCD_voidSetDataPort+0x6>
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	8a 83       	std	Y+2, r24	; 0x02
  u8 Local_u8Bit;
  
  Local_u8Bit = GET_BIT(Copy_u8Data,0);
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	81 70       	andi	r24, 0x01	; 1
    15c8:	89 83       	std	Y+1, r24	; 0x01
  setPinValue(CLCD_u8_D0_PORT,CLCD_u8_D0_PIN, Local_u8Bit);
    15ca:	81 e4       	ldi	r24, 0x41	; 65
    15cc:	60 e0       	ldi	r22, 0x00	; 0
    15ce:	49 81       	ldd	r20, Y+1	; 0x01
    15d0:	0e 94 87 06 	call	0xd0e	; 0xd0e <setPinValue>
  
  Local_u8Bit = GET_BIT(Copy_u8Data,1);
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	86 95       	lsr	r24
    15d8:	81 70       	andi	r24, 0x01	; 1
    15da:	89 83       	std	Y+1, r24	; 0x01
  setPinValue(CLCD_u8_D0_PORT,CLCD_u8_D1_PIN, Local_u8Bit);
    15dc:	81 e4       	ldi	r24, 0x41	; 65
    15de:	61 e0       	ldi	r22, 0x01	; 1
    15e0:	49 81       	ldd	r20, Y+1	; 0x01
    15e2:	0e 94 87 06 	call	0xd0e	; 0xd0e <setPinValue>
  
  Local_u8Bit = GET_BIT(Copy_u8Data,2);
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	86 95       	lsr	r24
    15ea:	86 95       	lsr	r24
    15ec:	81 70       	andi	r24, 0x01	; 1
    15ee:	89 83       	std	Y+1, r24	; 0x01
  setPinValue(CLCD_u8_D0_PORT,CLCD_u8_D2_PIN, Local_u8Bit);
    15f0:	81 e4       	ldi	r24, 0x41	; 65
    15f2:	62 e0       	ldi	r22, 0x02	; 2
    15f4:	49 81       	ldd	r20, Y+1	; 0x01
    15f6:	0e 94 87 06 	call	0xd0e	; 0xd0e <setPinValue>
  
  Local_u8Bit = GET_BIT(Copy_u8Data,3);
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	86 95       	lsr	r24
    15fe:	86 95       	lsr	r24
    1600:	86 95       	lsr	r24
    1602:	81 70       	andi	r24, 0x01	; 1
    1604:	89 83       	std	Y+1, r24	; 0x01
  setPinValue(CLCD_u8_D0_PORT,CLCD_u8_D3_PIN, Local_u8Bit);
    1606:	81 e4       	ldi	r24, 0x41	; 65
    1608:	63 e0       	ldi	r22, 0x03	; 3
    160a:	49 81       	ldd	r20, Y+1	; 0x01
    160c:	0e 94 87 06 	call	0xd0e	; 0xd0e <setPinValue>
  
  Local_u8Bit = GET_BIT(Copy_u8Data,4);
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	82 95       	swap	r24
    1614:	8f 70       	andi	r24, 0x0F	; 15
    1616:	81 70       	andi	r24, 0x01	; 1
    1618:	89 83       	std	Y+1, r24	; 0x01
  setPinValue(CLCD_u8_D0_PORT,CLCD_u8_D4_PIN, Local_u8Bit);
    161a:	81 e4       	ldi	r24, 0x41	; 65
    161c:	64 e0       	ldi	r22, 0x04	; 4
    161e:	49 81       	ldd	r20, Y+1	; 0x01
    1620:	0e 94 87 06 	call	0xd0e	; 0xd0e <setPinValue>
  
  Local_u8Bit = GET_BIT(Copy_u8Data,5);
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	82 95       	swap	r24
    1628:	86 95       	lsr	r24
    162a:	87 70       	andi	r24, 0x07	; 7
    162c:	81 70       	andi	r24, 0x01	; 1
    162e:	89 83       	std	Y+1, r24	; 0x01
  setPinValue(CLCD_u8_D0_PORT,CLCD_u8_D5_PIN, Local_u8Bit);
    1630:	81 e4       	ldi	r24, 0x41	; 65
    1632:	65 e0       	ldi	r22, 0x05	; 5
    1634:	49 81       	ldd	r20, Y+1	; 0x01
    1636:	0e 94 87 06 	call	0xd0e	; 0xd0e <setPinValue>
  
  Local_u8Bit = GET_BIT(Copy_u8Data,6);
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	82 95       	swap	r24
    163e:	86 95       	lsr	r24
    1640:	86 95       	lsr	r24
    1642:	83 70       	andi	r24, 0x03	; 3
    1644:	81 70       	andi	r24, 0x01	; 1
    1646:	89 83       	std	Y+1, r24	; 0x01
  setPinValue(CLCD_u8_D0_PORT,CLCD_u8_D6_PIN, Local_u8Bit);
    1648:	81 e4       	ldi	r24, 0x41	; 65
    164a:	66 e0       	ldi	r22, 0x06	; 6
    164c:	49 81       	ldd	r20, Y+1	; 0x01
    164e:	0e 94 87 06 	call	0xd0e	; 0xd0e <setPinValue>
  
  Local_u8Bit = GET_BIT(Copy_u8Data,7);
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	88 1f       	adc	r24, r24
    1656:	88 27       	eor	r24, r24
    1658:	88 1f       	adc	r24, r24
    165a:	89 83       	std	Y+1, r24	; 0x01
  setPinValue(CLCD_u8_D0_PORT,CLCD_u8_D7_PIN, Local_u8Bit);
    165c:	81 e4       	ldi	r24, 0x41	; 65
    165e:	67 e0       	ldi	r22, 0x07	; 7
    1660:	49 81       	ldd	r20, Y+1	; 0x01
    1662:	0e 94 87 06 	call	0xd0e	; 0xd0e <setPinValue>
}
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <CLCD_voidWriteCmd>:

/*Description : This API shall execute command on LCD*/
void CLCD_voidWriteCmd(u8 copy_u8Cmd)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
    1678:	6d 97       	sbiw	r28, 0x1d	; 29
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	8d 8f       	std	Y+29, r24	; 0x1d
  /* Set RS = 0 */
	setPinValue(CLCD_u8_RS_PORT,CLCD_u8_RS_PIN, 0);
    1686:	84 e4       	ldi	r24, 0x44	; 68
    1688:	60 e0       	ldi	r22, 0x00	; 0
    168a:	40 e0       	ldi	r20, 0x00	; 0
    168c:	0e 94 87 06 	call	0xd0e	; 0xd0e <setPinValue>
  
  /* Set RW = 0 */
	setPinValue(CLCD_u8_RW_PORT,CLCD_u8_RW_PIN, 0);
    1690:	84 e4       	ldi	r24, 0x44	; 68
    1692:	61 e0       	ldi	r22, 0x01	; 1
    1694:	40 e0       	ldi	r20, 0x00	; 0
    1696:	0e 94 87 06 	call	0xd0e	; 0xd0e <setPinValue>
  
  /* Set Data on Data Port */
  CLCD_voidSetDataPort(copy_u8Cmd);
    169a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    169c:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <CLCD_voidSetDataPort>
  
  /* Enable Pulse */
  setPinValue(CLCD_u8_E_PORT,CLCD_u8_E_PIN,1);
    16a0:	84 e4       	ldi	r24, 0x44	; 68
    16a2:	62 e0       	ldi	r22, 0x02	; 2
    16a4:	41 e0       	ldi	r20, 0x01	; 1
    16a6:	0e 94 87 06 	call	0xd0e	; 0xd0e <setPinValue>
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	a0 e8       	ldi	r26, 0x80	; 128
    16b0:	bf e3       	ldi	r27, 0x3F	; 63
    16b2:	89 8f       	std	Y+25, r24	; 0x19
    16b4:	9a 8f       	std	Y+26, r25	; 0x1a
    16b6:	ab 8f       	std	Y+27, r26	; 0x1b
    16b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ba:	69 8d       	ldd	r22, Y+25	; 0x19
    16bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	48 e4       	ldi	r20, 0x48	; 72
    16c8:	53 e4       	ldi	r21, 0x43	; 67
    16ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	8d 8b       	std	Y+21, r24	; 0x15
    16d4:	9e 8b       	std	Y+22, r25	; 0x16
    16d6:	af 8b       	std	Y+23, r26	; 0x17
    16d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16da:	6d 89       	ldd	r22, Y+21	; 0x15
    16dc:	7e 89       	ldd	r23, Y+22	; 0x16
    16de:	8f 89       	ldd	r24, Y+23	; 0x17
    16e0:	98 8d       	ldd	r25, Y+24	; 0x18
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	40 e8       	ldi	r20, 0x80	; 128
    16e8:	5f e3       	ldi	r21, 0x3F	; 63
    16ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ee:	88 23       	and	r24, r24
    16f0:	2c f4       	brge	.+10     	; 0x16fc <CLCD_voidWriteCmd+0x8c>
		__ticks = 1;
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	9c 8b       	std	Y+20, r25	; 0x14
    16f8:	8b 8b       	std	Y+19, r24	; 0x13
    16fa:	3f c0       	rjmp	.+126    	; 0x177a <CLCD_voidWriteCmd+0x10a>
	else if (__tmp > 65535)
    16fc:	6d 89       	ldd	r22, Y+21	; 0x15
    16fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1700:	8f 89       	ldd	r24, Y+23	; 0x17
    1702:	98 8d       	ldd	r25, Y+24	; 0x18
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	3f ef       	ldi	r19, 0xFF	; 255
    1708:	4f e7       	ldi	r20, 0x7F	; 127
    170a:	57 e4       	ldi	r21, 0x47	; 71
    170c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1710:	18 16       	cp	r1, r24
    1712:	4c f5       	brge	.+82     	; 0x1766 <CLCD_voidWriteCmd+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1714:	69 8d       	ldd	r22, Y+25	; 0x19
    1716:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1718:	8b 8d       	ldd	r24, Y+27	; 0x1b
    171a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e2       	ldi	r20, 0x20	; 32
    1722:	51 e4       	ldi	r21, 0x41	; 65
    1724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	bc 01       	movw	r22, r24
    172e:	cd 01       	movw	r24, r26
    1730:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	9c 8b       	std	Y+20, r25	; 0x14
    173a:	8b 8b       	std	Y+19, r24	; 0x13
    173c:	0f c0       	rjmp	.+30     	; 0x175c <CLCD_voidWriteCmd+0xec>
    173e:	84 e1       	ldi	r24, 0x14	; 20
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	9a 8b       	std	Y+18, r25	; 0x12
    1744:	89 8b       	std	Y+17, r24	; 0x11
    1746:	89 89       	ldd	r24, Y+17	; 0x11
    1748:	9a 89       	ldd	r25, Y+18	; 0x12
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	f1 f7       	brne	.-4      	; 0x174a <CLCD_voidWriteCmd+0xda>
    174e:	9a 8b       	std	Y+18, r25	; 0x12
    1750:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1752:	8b 89       	ldd	r24, Y+19	; 0x13
    1754:	9c 89       	ldd	r25, Y+20	; 0x14
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	9c 8b       	std	Y+20, r25	; 0x14
    175a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    175c:	8b 89       	ldd	r24, Y+19	; 0x13
    175e:	9c 89       	ldd	r25, Y+20	; 0x14
    1760:	00 97       	sbiw	r24, 0x00	; 0
    1762:	69 f7       	brne	.-38     	; 0x173e <CLCD_voidWriteCmd+0xce>
    1764:	14 c0       	rjmp	.+40     	; 0x178e <CLCD_voidWriteCmd+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1766:	6d 89       	ldd	r22, Y+21	; 0x15
    1768:	7e 89       	ldd	r23, Y+22	; 0x16
    176a:	8f 89       	ldd	r24, Y+23	; 0x17
    176c:	98 8d       	ldd	r25, Y+24	; 0x18
    176e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	9c 8b       	std	Y+20, r25	; 0x14
    1778:	8b 8b       	std	Y+19, r24	; 0x13
    177a:	8b 89       	ldd	r24, Y+19	; 0x13
    177c:	9c 89       	ldd	r25, Y+20	; 0x14
    177e:	98 8b       	std	Y+16, r25	; 0x10
    1780:	8f 87       	std	Y+15, r24	; 0x0f
    1782:	8f 85       	ldd	r24, Y+15	; 0x0f
    1784:	98 89       	ldd	r25, Y+16	; 0x10
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	f1 f7       	brne	.-4      	; 0x1786 <CLCD_voidWriteCmd+0x116>
    178a:	98 8b       	std	Y+16, r25	; 0x10
    178c:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(1);
  setPinValue(CLCD_u8_E_PORT,CLCD_u8_E_PIN,0);
    178e:	84 e4       	ldi	r24, 0x44	; 68
    1790:	62 e0       	ldi	r22, 0x02	; 2
    1792:	40 e0       	ldi	r20, 0x00	; 0
    1794:	0e 94 87 06 	call	0xd0e	; 0xd0e <setPinValue>
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	a0 e8       	ldi	r26, 0x80	; 128
    179e:	bf e3       	ldi	r27, 0x3F	; 63
    17a0:	8b 87       	std	Y+11, r24	; 0x0b
    17a2:	9c 87       	std	Y+12, r25	; 0x0c
    17a4:	ad 87       	std	Y+13, r26	; 0x0d
    17a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	48 e4       	ldi	r20, 0x48	; 72
    17b6:	53 e4       	ldi	r21, 0x43	; 67
    17b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	8f 83       	std	Y+7, r24	; 0x07
    17c2:	98 87       	std	Y+8, r25	; 0x08
    17c4:	a9 87       	std	Y+9, r26	; 0x09
    17c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17c8:	6f 81       	ldd	r22, Y+7	; 0x07
    17ca:	78 85       	ldd	r23, Y+8	; 0x08
    17cc:	89 85       	ldd	r24, Y+9	; 0x09
    17ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	40 e8       	ldi	r20, 0x80	; 128
    17d6:	5f e3       	ldi	r21, 0x3F	; 63
    17d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17dc:	88 23       	and	r24, r24
    17de:	2c f4       	brge	.+10     	; 0x17ea <CLCD_voidWriteCmd+0x17a>
		__ticks = 1;
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	9e 83       	std	Y+6, r25	; 0x06
    17e6:	8d 83       	std	Y+5, r24	; 0x05
    17e8:	3f c0       	rjmp	.+126    	; 0x1868 <CLCD_voidWriteCmd+0x1f8>
	else if (__tmp > 65535)
    17ea:	6f 81       	ldd	r22, Y+7	; 0x07
    17ec:	78 85       	ldd	r23, Y+8	; 0x08
    17ee:	89 85       	ldd	r24, Y+9	; 0x09
    17f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	3f ef       	ldi	r19, 0xFF	; 255
    17f6:	4f e7       	ldi	r20, 0x7F	; 127
    17f8:	57 e4       	ldi	r21, 0x47	; 71
    17fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17fe:	18 16       	cp	r1, r24
    1800:	4c f5       	brge	.+82     	; 0x1854 <CLCD_voidWriteCmd+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1802:	6b 85       	ldd	r22, Y+11	; 0x0b
    1804:	7c 85       	ldd	r23, Y+12	; 0x0c
    1806:	8d 85       	ldd	r24, Y+13	; 0x0d
    1808:	9e 85       	ldd	r25, Y+14	; 0x0e
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	40 e2       	ldi	r20, 0x20	; 32
    1810:	51 e4       	ldi	r21, 0x41	; 65
    1812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	bc 01       	movw	r22, r24
    181c:	cd 01       	movw	r24, r26
    181e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	9e 83       	std	Y+6, r25	; 0x06
    1828:	8d 83       	std	Y+5, r24	; 0x05
    182a:	0f c0       	rjmp	.+30     	; 0x184a <CLCD_voidWriteCmd+0x1da>
    182c:	84 e1       	ldi	r24, 0x14	; 20
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	9c 83       	std	Y+4, r25	; 0x04
    1832:	8b 83       	std	Y+3, r24	; 0x03
    1834:	8b 81       	ldd	r24, Y+3	; 0x03
    1836:	9c 81       	ldd	r25, Y+4	; 0x04
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	f1 f7       	brne	.-4      	; 0x1838 <CLCD_voidWriteCmd+0x1c8>
    183c:	9c 83       	std	Y+4, r25	; 0x04
    183e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1840:	8d 81       	ldd	r24, Y+5	; 0x05
    1842:	9e 81       	ldd	r25, Y+6	; 0x06
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	9e 83       	std	Y+6, r25	; 0x06
    1848:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    184a:	8d 81       	ldd	r24, Y+5	; 0x05
    184c:	9e 81       	ldd	r25, Y+6	; 0x06
    184e:	00 97       	sbiw	r24, 0x00	; 0
    1850:	69 f7       	brne	.-38     	; 0x182c <CLCD_voidWriteCmd+0x1bc>
    1852:	14 c0       	rjmp	.+40     	; 0x187c <CLCD_voidWriteCmd+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1854:	6f 81       	ldd	r22, Y+7	; 0x07
    1856:	78 85       	ldd	r23, Y+8	; 0x08
    1858:	89 85       	ldd	r24, Y+9	; 0x09
    185a:	9a 85       	ldd	r25, Y+10	; 0x0a
    185c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	9e 83       	std	Y+6, r25	; 0x06
    1866:	8d 83       	std	Y+5, r24	; 0x05
    1868:	8d 81       	ldd	r24, Y+5	; 0x05
    186a:	9e 81       	ldd	r25, Y+6	; 0x06
    186c:	9a 83       	std	Y+2, r25	; 0x02
    186e:	89 83       	std	Y+1, r24	; 0x01
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	9a 81       	ldd	r25, Y+2	; 0x02
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	f1 f7       	brne	.-4      	; 0x1874 <CLCD_voidWriteCmd+0x204>
    1878:	9a 83       	std	Y+2, r25	; 0x02
    187a:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);

}
    187c:	6d 96       	adiw	r28, 0x1d	; 29
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	cd bf       	out	0x3d, r28	; 61
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <portInitialize>:
#include "PORT_private.h"
#include "PORT_config.h"
#include "PORT_register.h"

void portInitialize(void)
{
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
    1896:	ea e3       	ldi	r30, 0x3A	; 58
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	8f ef       	ldi	r24, 0xFF	; 255
    189c:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
    189e:	e7 e3       	ldi	r30, 0x37	; 55
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	8f e3       	ldi	r24, 0x3F	; 63
    18a4:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
    18a6:	e4 e3       	ldi	r30, 0x34	; 52
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	8f ef       	ldi	r24, 0xFF	; 255
    18ac:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
    18ae:	e1 e3       	ldi	r30, 0x31	; 49
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	8f ef       	ldi	r24, 0xFF	; 255
    18b4:	80 83       	st	Z, r24
	
	PORTA=PORTA_INITIALVALUE;
    18b6:	eb e3       	ldi	r30, 0x3B	; 59
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	10 82       	st	Z, r1
	PORTB=PORTB_INITIALVALUE;
    18bc:	e8 e3       	ldi	r30, 0x38	; 56
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	8f ef       	ldi	r24, 0xFF	; 255
    18c2:	80 83       	st	Z, r24
	PORTC=PORTC_INITIALVALUE;
    18c4:	e5 e3       	ldi	r30, 0x35	; 53
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	10 82       	st	Z, r1
	PORTD=PORTD_INITIALVALUE;
    18ca:	e2 e3       	ldi	r30, 0x32	; 50
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	10 82       	st	Z, r1
}
    18d0:	cf 91       	pop	r28
    18d2:	df 91       	pop	r29
    18d4:	08 95       	ret

000018d6 <main>:
#define screenLowerRigtLimit 0x4F
#define screenUpperLeftLimit 0x00
#define screenLowerLeftLimit 0x40

int main (void)
{
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
    18de:	c0 55       	subi	r28, 0x50	; 80
    18e0:	d0 40       	sbci	r29, 0x00	; 0
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	f8 94       	cli
    18e6:	de bf       	out	0x3e, r29	; 62
    18e8:	0f be       	out	0x3f, r0	; 63
    18ea:	cd bf       	out	0x3d, r28	; 61
	portInitialize();
    18ec:	0e 94 47 0c 	call	0x188e	; 0x188e <portInitialize>
	CLCD_voidInitialize();
    18f0:	0e 94 cd 08 	call	0x119a	; 0x119a <CLCD_voidInitialize>

//	u8 ch=0b00110001;
//	u8 position=0;
	u8 key=0;
    18f4:	1c ae       	std	Y+60, r1	; 0x3c
	u8 Word[5]={'N','A','F','E','3'};
    18f6:	ce 01       	movw	r24, r28
    18f8:	cd 96       	adiw	r24, 0x3d	; 61
    18fa:	29 96       	adiw	r28, 0x09	; 9
    18fc:	9f af       	std	Y+63, r25	; 0x3f
    18fe:	8e af       	std	Y+62, r24	; 0x3e
    1900:	29 97       	sbiw	r28, 0x09	; 9
    1902:	ed e8       	ldi	r30, 0x8D	; 141
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	2b 96       	adiw	r28, 0x0b	; 11
    1908:	ff af       	std	Y+63, r31	; 0x3f
    190a:	ee af       	std	Y+62, r30	; 0x3e
    190c:	2b 97       	sbiw	r28, 0x0b	; 11
    190e:	f5 e0       	ldi	r31, 0x05	; 5
    1910:	2c 96       	adiw	r28, 0x0c	; 12
    1912:	ff af       	std	Y+63, r31	; 0x3f
    1914:	2c 97       	sbiw	r28, 0x0c	; 12
    1916:	2b 96       	adiw	r28, 0x0b	; 11
    1918:	ee ad       	ldd	r30, Y+62	; 0x3e
    191a:	ff ad       	ldd	r31, Y+63	; 0x3f
    191c:	2b 97       	sbiw	r28, 0x0b	; 11
    191e:	00 80       	ld	r0, Z
    1920:	2b 96       	adiw	r28, 0x0b	; 11
    1922:	8e ad       	ldd	r24, Y+62	; 0x3e
    1924:	9f ad       	ldd	r25, Y+63	; 0x3f
    1926:	2b 97       	sbiw	r28, 0x0b	; 11
    1928:	01 96       	adiw	r24, 0x01	; 1
    192a:	2b 96       	adiw	r28, 0x0b	; 11
    192c:	9f af       	std	Y+63, r25	; 0x3f
    192e:	8e af       	std	Y+62, r24	; 0x3e
    1930:	2b 97       	sbiw	r28, 0x0b	; 11
    1932:	29 96       	adiw	r28, 0x09	; 9
    1934:	ee ad       	ldd	r30, Y+62	; 0x3e
    1936:	ff ad       	ldd	r31, Y+63	; 0x3f
    1938:	29 97       	sbiw	r28, 0x09	; 9
    193a:	00 82       	st	Z, r0
    193c:	29 96       	adiw	r28, 0x09	; 9
    193e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1940:	9f ad       	ldd	r25, Y+63	; 0x3f
    1942:	29 97       	sbiw	r28, 0x09	; 9
    1944:	01 96       	adiw	r24, 0x01	; 1
    1946:	29 96       	adiw	r28, 0x09	; 9
    1948:	9f af       	std	Y+63, r25	; 0x3f
    194a:	8e af       	std	Y+62, r24	; 0x3e
    194c:	29 97       	sbiw	r28, 0x09	; 9
    194e:	2c 96       	adiw	r28, 0x0c	; 12
    1950:	9f ad       	ldd	r25, Y+63	; 0x3f
    1952:	2c 97       	sbiw	r28, 0x0c	; 12
    1954:	91 50       	subi	r25, 0x01	; 1
    1956:	2c 96       	adiw	r28, 0x0c	; 12
    1958:	9f af       	std	Y+63, r25	; 0x3f
    195a:	2c 97       	sbiw	r28, 0x0c	; 12
    195c:	2c 96       	adiw	r28, 0x0c	; 12
    195e:	ef ad       	ldd	r30, Y+63	; 0x3f
    1960:	2c 97       	sbiw	r28, 0x0c	; 12
    1962:	ee 23       	and	r30, r30
    1964:	c1 f6       	brne	.-80     	; 0x1916 <main+0x40>
	u8 positions[5]={0x00,0x01,0x02,0x03,0x04};
    1966:	ce 01       	movw	r24, r28
    1968:	8e 5b       	subi	r24, 0xBE	; 190
    196a:	9f 4f       	sbci	r25, 0xFF	; 255
    196c:	2e 96       	adiw	r28, 0x0e	; 14
    196e:	9f af       	std	Y+63, r25	; 0x3f
    1970:	8e af       	std	Y+62, r24	; 0x3e
    1972:	2e 97       	sbiw	r28, 0x0e	; 14
    1974:	88 e8       	ldi	r24, 0x88	; 136
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	60 96       	adiw	r28, 0x10	; 16
    197a:	9f af       	std	Y+63, r25	; 0x3f
    197c:	8e af       	std	Y+62, r24	; 0x3e
    197e:	60 97       	sbiw	r28, 0x10	; 16
    1980:	95 e0       	ldi	r25, 0x05	; 5
    1982:	61 96       	adiw	r28, 0x11	; 17
    1984:	9f af       	std	Y+63, r25	; 0x3f
    1986:	61 97       	sbiw	r28, 0x11	; 17
    1988:	60 96       	adiw	r28, 0x10	; 16
    198a:	ee ad       	ldd	r30, Y+62	; 0x3e
    198c:	ff ad       	ldd	r31, Y+63	; 0x3f
    198e:	60 97       	sbiw	r28, 0x10	; 16
    1990:	00 80       	ld	r0, Z
    1992:	60 96       	adiw	r28, 0x10	; 16
    1994:	8e ad       	ldd	r24, Y+62	; 0x3e
    1996:	9f ad       	ldd	r25, Y+63	; 0x3f
    1998:	60 97       	sbiw	r28, 0x10	; 16
    199a:	01 96       	adiw	r24, 0x01	; 1
    199c:	60 96       	adiw	r28, 0x10	; 16
    199e:	9f af       	std	Y+63, r25	; 0x3f
    19a0:	8e af       	std	Y+62, r24	; 0x3e
    19a2:	60 97       	sbiw	r28, 0x10	; 16
    19a4:	2e 96       	adiw	r28, 0x0e	; 14
    19a6:	ee ad       	ldd	r30, Y+62	; 0x3e
    19a8:	ff ad       	ldd	r31, Y+63	; 0x3f
    19aa:	2e 97       	sbiw	r28, 0x0e	; 14
    19ac:	00 82       	st	Z, r0
    19ae:	2e 96       	adiw	r28, 0x0e	; 14
    19b0:	8e ad       	ldd	r24, Y+62	; 0x3e
    19b2:	9f ad       	ldd	r25, Y+63	; 0x3f
    19b4:	2e 97       	sbiw	r28, 0x0e	; 14
    19b6:	01 96       	adiw	r24, 0x01	; 1
    19b8:	2e 96       	adiw	r28, 0x0e	; 14
    19ba:	9f af       	std	Y+63, r25	; 0x3f
    19bc:	8e af       	std	Y+62, r24	; 0x3e
    19be:	2e 97       	sbiw	r28, 0x0e	; 14
    19c0:	61 96       	adiw	r28, 0x11	; 17
    19c2:	9f ad       	ldd	r25, Y+63	; 0x3f
    19c4:	61 97       	sbiw	r28, 0x11	; 17
    19c6:	91 50       	subi	r25, 0x01	; 1
    19c8:	61 96       	adiw	r28, 0x11	; 17
    19ca:	9f af       	std	Y+63, r25	; 0x3f
    19cc:	61 97       	sbiw	r28, 0x11	; 17
    19ce:	61 96       	adiw	r28, 0x11	; 17
    19d0:	ef ad       	ldd	r30, Y+63	; 0x3f
    19d2:	61 97       	sbiw	r28, 0x11	; 17
    19d4:	ee 23       	and	r30, r30
    19d6:	c1 f6       	brne	.-80     	; 0x1988 <main+0xb2>
	u8 i=0;
    19d8:	1b ae       	std	Y+59, r1	; 0x3b
	u8 lineflag=2;
    19da:	82 e0       	ldi	r24, 0x02	; 2
    19dc:	8a af       	std	Y+58, r24	; 0x3a
	u8 directionFlag=1;
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	89 af       	std	Y+57, r24	; 0x39
	u8 static limitcounter=0;//dummiest way to control the screen limit

	while(1)
	{
		//CLCD_voidWriteCmd(clear);
		for(i=0;i<sizeof(Word)/sizeof(u8);i++)
    19e2:	1b ae       	std	Y+59, r1	; 0x3b
    19e4:	1b c0       	rjmp	.+54     	; 0x1a1c <main+0x146>
		{
			CLCD_voidWriteCmd(0b10000000|positions[i]);
    19e6:	8b ad       	ldd	r24, Y+59	; 0x3b
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	ce 01       	movw	r24, r28
    19ee:	8e 5b       	subi	r24, 0xBE	; 190
    19f0:	9f 4f       	sbci	r25, 0xFF	; 255
    19f2:	fc 01       	movw	r30, r24
    19f4:	e2 0f       	add	r30, r18
    19f6:	f3 1f       	adc	r31, r19
    19f8:	80 81       	ld	r24, Z
    19fa:	80 68       	ori	r24, 0x80	; 128
    19fc:	0e 94 38 0b 	call	0x1670	; 0x1670 <CLCD_voidWriteCmd>
			CLCD_voidWriteData(Word[i]);
    1a00:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a02:	28 2f       	mov	r18, r24
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	ce 01       	movw	r24, r28
    1a08:	cd 96       	adiw	r24, 0x3d	; 61
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	e2 0f       	add	r30, r18
    1a0e:	f3 1f       	adc	r31, r19
    1a10:	80 81       	ld	r24, Z
    1a12:	0e 94 cd 09 	call	0x139a	; 0x139a <CLCD_voidWriteData>
	u8 static limitcounter=0;//dummiest way to control the screen limit

	while(1)
	{
		//CLCD_voidWriteCmd(clear);
		for(i=0;i<sizeof(Word)/sizeof(u8);i++)
    1a16:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a18:	8f 5f       	subi	r24, 0xFF	; 255
    1a1a:	8b af       	std	Y+59, r24	; 0x3b
    1a1c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a1e:	85 30       	cpi	r24, 0x05	; 5
    1a20:	10 f3       	brcs	.-60     	; 0x19e6 <main+0x110>
		direction 1 -> right
		direction 0 -> left
		lineflag  1 -> bottom line
		lineflag  0 -> upper line
		*/
		key=KEYPAD_GetPressedKey();
    1a22:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <KEYPAD_GetPressedKey>
    1a26:	8c af       	std	Y+60, r24	; 0x3c
		if(key==2)lineflag=0;						//up
    1a28:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a2a:	82 30       	cpi	r24, 0x02	; 2
    1a2c:	11 f4       	brne	.+4      	; 0x1a32 <main+0x15c>
    1a2e:	1a ae       	std	Y+58, r1	; 0x3a
    1a30:	66 c1       	rjmp	.+716    	; 0x1cfe <main+0x428>
		else if(key==6)lineflag=1;					//down
    1a32:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a34:	86 30       	cpi	r24, 0x06	; 6
    1a36:	19 f4       	brne	.+6      	; 0x1a3e <main+0x168>
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	8a af       	std	Y+58, r24	; 0x3a
    1a3c:	60 c1       	rjmp	.+704    	; 0x1cfe <main+0x428>
		else if(key==7)//right
    1a3e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a40:	87 30       	cpi	r24, 0x07	; 7
    1a42:	09 f0       	breq	.+2      	; 0x1a46 <main+0x170>
    1a44:	ac c0       	rjmp	.+344    	; 0x1b9e <main+0x2c8>
			{
				if(limitcounter==11)
    1a46:	80 91 92 00 	lds	r24, 0x0092
    1a4a:	8b 30       	cpi	r24, 0x0B	; 11
    1a4c:	51 f2       	breq	.-108    	; 0x19e2 <main+0x10c>
					continue;
				//CLCD_voidWriteCmd(0b00011100);//shifts all display to right
				CLCD_voidWriteCmd(clear);
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	0e 94 38 0b 	call	0x1670	; 0x1670 <CLCD_voidWriteCmd>
				positions[0]++;
    1a54:	fe 01       	movw	r30, r28
    1a56:	ee 5b       	subi	r30, 0xBE	; 190
    1a58:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5a:	80 81       	ld	r24, Z
    1a5c:	8f 5f       	subi	r24, 0xFF	; 255
    1a5e:	fe 01       	movw	r30, r28
    1a60:	ee 5b       	subi	r30, 0xBE	; 190
    1a62:	ff 4f       	sbci	r31, 0xFF	; 255
    1a64:	80 83       	st	Z, r24
				positions[1]++;
    1a66:	fe 01       	movw	r30, r28
    1a68:	ee 5b       	subi	r30, 0xBE	; 190
    1a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6c:	81 81       	ldd	r24, Z+1	; 0x01
    1a6e:	8f 5f       	subi	r24, 0xFF	; 255
    1a70:	fe 01       	movw	r30, r28
    1a72:	ee 5b       	subi	r30, 0xBE	; 190
    1a74:	ff 4f       	sbci	r31, 0xFF	; 255
    1a76:	81 83       	std	Z+1, r24	; 0x01
				positions[2]++;
    1a78:	fe 01       	movw	r30, r28
    1a7a:	ee 5b       	subi	r30, 0xBE	; 190
    1a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7e:	82 81       	ldd	r24, Z+2	; 0x02
    1a80:	8f 5f       	subi	r24, 0xFF	; 255
    1a82:	fe 01       	movw	r30, r28
    1a84:	ee 5b       	subi	r30, 0xBE	; 190
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	82 83       	std	Z+2, r24	; 0x02
				positions[3]++;
    1a8a:	fe 01       	movw	r30, r28
    1a8c:	ee 5b       	subi	r30, 0xBE	; 190
    1a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a90:	83 81       	ldd	r24, Z+3	; 0x03
    1a92:	8f 5f       	subi	r24, 0xFF	; 255
    1a94:	fe 01       	movw	r30, r28
    1a96:	ee 5b       	subi	r30, 0xBE	; 190
    1a98:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9a:	83 83       	std	Z+3, r24	; 0x03
				positions[4]++;
    1a9c:	fe 01       	movw	r30, r28
    1a9e:	ee 5b       	subi	r30, 0xBE	; 190
    1aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa2:	84 81       	ldd	r24, Z+4	; 0x04
    1aa4:	8f 5f       	subi	r24, 0xFF	; 255
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	ee 5b       	subi	r30, 0xBE	; 190
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	84 83       	std	Z+4, r24	; 0x04
				limitcounter++;
    1aae:	80 91 92 00 	lds	r24, 0x0092
    1ab2:	8f 5f       	subi	r24, 0xFF	; 255
    1ab4:	80 93 92 00 	sts	0x0092, r24
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	a0 e2       	ldi	r26, 0x20	; 32
    1abe:	b1 e4       	ldi	r27, 0x41	; 65
    1ac0:	8d ab       	std	Y+53, r24	; 0x35
    1ac2:	9e ab       	std	Y+54, r25	; 0x36
    1ac4:	af ab       	std	Y+55, r26	; 0x37
    1ac6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac8:	6d a9       	ldd	r22, Y+53	; 0x35
    1aca:	7e a9       	ldd	r23, Y+54	; 0x36
    1acc:	8f a9       	ldd	r24, Y+55	; 0x37
    1ace:	98 ad       	ldd	r25, Y+56	; 0x38
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	48 e4       	ldi	r20, 0x48	; 72
    1ad6:	53 e4       	ldi	r21, 0x43	; 67
    1ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	89 ab       	std	Y+49, r24	; 0x31
    1ae2:	9a ab       	std	Y+50, r25	; 0x32
    1ae4:	ab ab       	std	Y+51, r26	; 0x33
    1ae6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ae8:	69 a9       	ldd	r22, Y+49	; 0x31
    1aea:	7a a9       	ldd	r23, Y+50	; 0x32
    1aec:	8b a9       	ldd	r24, Y+51	; 0x33
    1aee:	9c a9       	ldd	r25, Y+52	; 0x34
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e8       	ldi	r20, 0x80	; 128
    1af6:	5f e3       	ldi	r21, 0x3F	; 63
    1af8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1afc:	88 23       	and	r24, r24
    1afe:	2c f4       	brge	.+10     	; 0x1b0a <main+0x234>
		__ticks = 1;
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	98 ab       	std	Y+48, r25	; 0x30
    1b06:	8f a7       	std	Y+47, r24	; 0x2f
    1b08:	3f c0       	rjmp	.+126    	; 0x1b88 <main+0x2b2>
	else if (__tmp > 65535)
    1b0a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b0c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b0e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b10:	9c a9       	ldd	r25, Y+52	; 0x34
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	3f ef       	ldi	r19, 0xFF	; 255
    1b16:	4f e7       	ldi	r20, 0x7F	; 127
    1b18:	57 e4       	ldi	r21, 0x47	; 71
    1b1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b1e:	18 16       	cp	r1, r24
    1b20:	4c f5       	brge	.+82     	; 0x1b74 <main+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b22:	6d a9       	ldd	r22, Y+53	; 0x35
    1b24:	7e a9       	ldd	r23, Y+54	; 0x36
    1b26:	8f a9       	ldd	r24, Y+55	; 0x37
    1b28:	98 ad       	ldd	r25, Y+56	; 0x38
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	40 e2       	ldi	r20, 0x20	; 32
    1b30:	51 e4       	ldi	r21, 0x41	; 65
    1b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	bc 01       	movw	r22, r24
    1b3c:	cd 01       	movw	r24, r26
    1b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	98 ab       	std	Y+48, r25	; 0x30
    1b48:	8f a7       	std	Y+47, r24	; 0x2f
    1b4a:	0f c0       	rjmp	.+30     	; 0x1b6a <main+0x294>
    1b4c:	84 e1       	ldi	r24, 0x14	; 20
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	9e a7       	std	Y+46, r25	; 0x2e
    1b52:	8d a7       	std	Y+45, r24	; 0x2d
    1b54:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b56:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b58:	01 97       	sbiw	r24, 0x01	; 1
    1b5a:	f1 f7       	brne	.-4      	; 0x1b58 <main+0x282>
    1b5c:	9e a7       	std	Y+46, r25	; 0x2e
    1b5e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b60:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b62:	98 a9       	ldd	r25, Y+48	; 0x30
    1b64:	01 97       	sbiw	r24, 0x01	; 1
    1b66:	98 ab       	std	Y+48, r25	; 0x30
    1b68:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b6c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b6e:	00 97       	sbiw	r24, 0x00	; 0
    1b70:	69 f7       	brne	.-38     	; 0x1b4c <main+0x276>
    1b72:	c5 c0       	rjmp	.+394    	; 0x1cfe <main+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b74:	69 a9       	ldd	r22, Y+49	; 0x31
    1b76:	7a a9       	ldd	r23, Y+50	; 0x32
    1b78:	8b a9       	ldd	r24, Y+51	; 0x33
    1b7a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	98 ab       	std	Y+48, r25	; 0x30
    1b86:	8f a7       	std	Y+47, r24	; 0x2f
    1b88:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b8a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b8c:	9c a7       	std	Y+44, r25	; 0x2c
    1b8e:	8b a7       	std	Y+43, r24	; 0x2b
    1b90:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b92:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	f1 f7       	brne	.-4      	; 0x1b94 <main+0x2be>
    1b98:	9c a7       	std	Y+44, r25	; 0x2c
    1b9a:	8b a7       	std	Y+43, r24	; 0x2b
    1b9c:	b0 c0       	rjmp	.+352    	; 0x1cfe <main+0x428>
				_delay_ms(10);
			}
		else if(key==5)
    1b9e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1ba0:	85 30       	cpi	r24, 0x05	; 5
    1ba2:	09 f0       	breq	.+2      	; 0x1ba6 <main+0x2d0>
    1ba4:	ac c0       	rjmp	.+344    	; 0x1cfe <main+0x428>
			{
				if(limitcounter==0)
    1ba6:	80 91 92 00 	lds	r24, 0x0092
    1baa:	88 23       	and	r24, r24
    1bac:	09 f4       	brne	.+2      	; 0x1bb0 <main+0x2da>
    1bae:	19 cf       	rjmp	.-462    	; 0x19e2 <main+0x10c>
					continue;
				CLCD_voidWriteCmd(clear);
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	0e 94 38 0b 	call	0x1670	; 0x1670 <CLCD_voidWriteCmd>
				positions[0]--;
    1bb6:	fe 01       	movw	r30, r28
    1bb8:	ee 5b       	subi	r30, 0xBE	; 190
    1bba:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbc:	80 81       	ld	r24, Z
    1bbe:	81 50       	subi	r24, 0x01	; 1
    1bc0:	fe 01       	movw	r30, r28
    1bc2:	ee 5b       	subi	r30, 0xBE	; 190
    1bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc6:	80 83       	st	Z, r24
				positions[1]--;
    1bc8:	fe 01       	movw	r30, r28
    1bca:	ee 5b       	subi	r30, 0xBE	; 190
    1bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bce:	81 81       	ldd	r24, Z+1	; 0x01
    1bd0:	81 50       	subi	r24, 0x01	; 1
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	ee 5b       	subi	r30, 0xBE	; 190
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	81 83       	std	Z+1, r24	; 0x01
				positions[2]--;
    1bda:	fe 01       	movw	r30, r28
    1bdc:	ee 5b       	subi	r30, 0xBE	; 190
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	82 81       	ldd	r24, Z+2	; 0x02
    1be2:	81 50       	subi	r24, 0x01	; 1
    1be4:	fe 01       	movw	r30, r28
    1be6:	ee 5b       	subi	r30, 0xBE	; 190
    1be8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bea:	82 83       	std	Z+2, r24	; 0x02
				positions[3]--;
    1bec:	fe 01       	movw	r30, r28
    1bee:	ee 5b       	subi	r30, 0xBE	; 190
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	83 81       	ldd	r24, Z+3	; 0x03
    1bf4:	81 50       	subi	r24, 0x01	; 1
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	ee 5b       	subi	r30, 0xBE	; 190
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	83 83       	std	Z+3, r24	; 0x03
				positions[4]--;
    1bfe:	fe 01       	movw	r30, r28
    1c00:	ee 5b       	subi	r30, 0xBE	; 190
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	84 81       	ldd	r24, Z+4	; 0x04
    1c06:	81 50       	subi	r24, 0x01	; 1
    1c08:	fe 01       	movw	r30, r28
    1c0a:	ee 5b       	subi	r30, 0xBE	; 190
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	84 83       	std	Z+4, r24	; 0x04
				//CLCD_voidWriteCmd(0b00011000);//shifts all display to left
				limitcounter--;
    1c10:	80 91 92 00 	lds	r24, 0x0092
    1c14:	81 50       	subi	r24, 0x01	; 1
    1c16:	80 93 92 00 	sts	0x0092, r24
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	a0 e2       	ldi	r26, 0x20	; 32
    1c20:	b1 e4       	ldi	r27, 0x41	; 65
    1c22:	8f a3       	std	Y+39, r24	; 0x27
    1c24:	98 a7       	std	Y+40, r25	; 0x28
    1c26:	a9 a7       	std	Y+41, r26	; 0x29
    1c28:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c2a:	6f a1       	ldd	r22, Y+39	; 0x27
    1c2c:	78 a5       	ldd	r23, Y+40	; 0x28
    1c2e:	89 a5       	ldd	r24, Y+41	; 0x29
    1c30:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	48 e4       	ldi	r20, 0x48	; 72
    1c38:	53 e4       	ldi	r21, 0x43	; 67
    1c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	8b a3       	std	Y+35, r24	; 0x23
    1c44:	9c a3       	std	Y+36, r25	; 0x24
    1c46:	ad a3       	std	Y+37, r26	; 0x25
    1c48:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c4a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c4c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c4e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c50:	9e a1       	ldd	r25, Y+38	; 0x26
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	40 e8       	ldi	r20, 0x80	; 128
    1c58:	5f e3       	ldi	r21, 0x3F	; 63
    1c5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c5e:	88 23       	and	r24, r24
    1c60:	2c f4       	brge	.+10     	; 0x1c6c <main+0x396>
		__ticks = 1;
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	9a a3       	std	Y+34, r25	; 0x22
    1c68:	89 a3       	std	Y+33, r24	; 0x21
    1c6a:	3f c0       	rjmp	.+126    	; 0x1cea <main+0x414>
	else if (__tmp > 65535)
    1c6c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c6e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c70:	8d a1       	ldd	r24, Y+37	; 0x25
    1c72:	9e a1       	ldd	r25, Y+38	; 0x26
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	3f ef       	ldi	r19, 0xFF	; 255
    1c78:	4f e7       	ldi	r20, 0x7F	; 127
    1c7a:	57 e4       	ldi	r21, 0x47	; 71
    1c7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c80:	18 16       	cp	r1, r24
    1c82:	4c f5       	brge	.+82     	; 0x1cd6 <main+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c84:	6f a1       	ldd	r22, Y+39	; 0x27
    1c86:	78 a5       	ldd	r23, Y+40	; 0x28
    1c88:	89 a5       	ldd	r24, Y+41	; 0x29
    1c8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	40 e2       	ldi	r20, 0x20	; 32
    1c92:	51 e4       	ldi	r21, 0x41	; 65
    1c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	bc 01       	movw	r22, r24
    1c9e:	cd 01       	movw	r24, r26
    1ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	9a a3       	std	Y+34, r25	; 0x22
    1caa:	89 a3       	std	Y+33, r24	; 0x21
    1cac:	0f c0       	rjmp	.+30     	; 0x1ccc <main+0x3f6>
    1cae:	84 e1       	ldi	r24, 0x14	; 20
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	98 a3       	std	Y+32, r25	; 0x20
    1cb4:	8f 8f       	std	Y+31, r24	; 0x1f
    1cb6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cb8:	98 a1       	ldd	r25, Y+32	; 0x20
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	f1 f7       	brne	.-4      	; 0x1cba <main+0x3e4>
    1cbe:	98 a3       	std	Y+32, r25	; 0x20
    1cc0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc2:	89 a1       	ldd	r24, Y+33	; 0x21
    1cc4:	9a a1       	ldd	r25, Y+34	; 0x22
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	9a a3       	std	Y+34, r25	; 0x22
    1cca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ccc:	89 a1       	ldd	r24, Y+33	; 0x21
    1cce:	9a a1       	ldd	r25, Y+34	; 0x22
    1cd0:	00 97       	sbiw	r24, 0x00	; 0
    1cd2:	69 f7       	brne	.-38     	; 0x1cae <main+0x3d8>
    1cd4:	14 c0       	rjmp	.+40     	; 0x1cfe <main+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd6:	6b a1       	ldd	r22, Y+35	; 0x23
    1cd8:	7c a1       	ldd	r23, Y+36	; 0x24
    1cda:	8d a1       	ldd	r24, Y+37	; 0x25
    1cdc:	9e a1       	ldd	r25, Y+38	; 0x26
    1cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	9a a3       	std	Y+34, r25	; 0x22
    1ce8:	89 a3       	std	Y+33, r24	; 0x21
    1cea:	89 a1       	ldd	r24, Y+33	; 0x21
    1cec:	9a a1       	ldd	r25, Y+34	; 0x22
    1cee:	9e 8f       	std	Y+30, r25	; 0x1e
    1cf0:	8d 8f       	std	Y+29, r24	; 0x1d
    1cf2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cf4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	f1 f7       	brne	.-4      	; 0x1cf6 <main+0x420>
    1cfa:	9e 8f       	std	Y+30, r25	; 0x1e
    1cfc:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(10);
			}
		//_delay_ms(4000);
		//CLCD_voidWriteCmd(clear);

			if(lineflag==1)
    1cfe:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d00:	81 30       	cpi	r24, 0x01	; 1
    1d02:	09 f0       	breq	.+2      	; 0x1d06 <main+0x430>
    1d04:	a5 c0       	rjmp	.+330    	; 0x1e50 <main+0x57a>
			{
				CLCD_voidWriteCmd(clear);
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	0e 94 38 0b 	call	0x1670	; 0x1670 <CLCD_voidWriteCmd>
				positions[0]-=0x40;
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	ee 5b       	subi	r30, 0xBE	; 190
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	80 81       	ld	r24, Z
    1d14:	80 54       	subi	r24, 0x40	; 64
    1d16:	fe 01       	movw	r30, r28
    1d18:	ee 5b       	subi	r30, 0xBE	; 190
    1d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1c:	80 83       	st	Z, r24
				positions[1]-=0x40;
    1d1e:	fe 01       	movw	r30, r28
    1d20:	ee 5b       	subi	r30, 0xBE	; 190
    1d22:	ff 4f       	sbci	r31, 0xFF	; 255
    1d24:	81 81       	ldd	r24, Z+1	; 0x01
    1d26:	80 54       	subi	r24, 0x40	; 64
    1d28:	fe 01       	movw	r30, r28
    1d2a:	ee 5b       	subi	r30, 0xBE	; 190
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	81 83       	std	Z+1, r24	; 0x01
				positions[2]-=0x40;
    1d30:	fe 01       	movw	r30, r28
    1d32:	ee 5b       	subi	r30, 0xBE	; 190
    1d34:	ff 4f       	sbci	r31, 0xFF	; 255
    1d36:	82 81       	ldd	r24, Z+2	; 0x02
    1d38:	80 54       	subi	r24, 0x40	; 64
    1d3a:	fe 01       	movw	r30, r28
    1d3c:	ee 5b       	subi	r30, 0xBE	; 190
    1d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d40:	82 83       	std	Z+2, r24	; 0x02
				positions[3]-=0x40;
    1d42:	fe 01       	movw	r30, r28
    1d44:	ee 5b       	subi	r30, 0xBE	; 190
    1d46:	ff 4f       	sbci	r31, 0xFF	; 255
    1d48:	83 81       	ldd	r24, Z+3	; 0x03
    1d4a:	80 54       	subi	r24, 0x40	; 64
    1d4c:	fe 01       	movw	r30, r28
    1d4e:	ee 5b       	subi	r30, 0xBE	; 190
    1d50:	ff 4f       	sbci	r31, 0xFF	; 255
    1d52:	83 83       	std	Z+3, r24	; 0x03
				positions[4]-=0x40;
    1d54:	fe 01       	movw	r30, r28
    1d56:	ee 5b       	subi	r30, 0xBE	; 190
    1d58:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5a:	84 81       	ldd	r24, Z+4	; 0x04
    1d5c:	80 54       	subi	r24, 0x40	; 64
    1d5e:	fe 01       	movw	r30, r28
    1d60:	ee 5b       	subi	r30, 0xBE	; 190
    1d62:	ff 4f       	sbci	r31, 0xFF	; 255
    1d64:	84 83       	std	Z+4, r24	; 0x04
				lineflag=2;
    1d66:	82 e0       	ldi	r24, 0x02	; 2
    1d68:	8a af       	std	Y+58, r24	; 0x3a
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	a0 e2       	ldi	r26, 0x20	; 32
    1d70:	b1 e4       	ldi	r27, 0x41	; 65
    1d72:	89 8f       	std	Y+25, r24	; 0x19
    1d74:	9a 8f       	std	Y+26, r25	; 0x1a
    1d76:	ab 8f       	std	Y+27, r26	; 0x1b
    1d78:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d7a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	48 e4       	ldi	r20, 0x48	; 72
    1d88:	53 e4       	ldi	r21, 0x43	; 67
    1d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	8d 8b       	std	Y+21, r24	; 0x15
    1d94:	9e 8b       	std	Y+22, r25	; 0x16
    1d96:	af 8b       	std	Y+23, r26	; 0x17
    1d98:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1da0:	98 8d       	ldd	r25, Y+24	; 0x18
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	40 e8       	ldi	r20, 0x80	; 128
    1da8:	5f e3       	ldi	r21, 0x3F	; 63
    1daa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dae:	88 23       	and	r24, r24
    1db0:	2c f4       	brge	.+10     	; 0x1dbc <main+0x4e6>
		__ticks = 1;
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	9c 8b       	std	Y+20, r25	; 0x14
    1db8:	8b 8b       	std	Y+19, r24	; 0x13
    1dba:	3f c0       	rjmp	.+126    	; 0x1e3a <main+0x564>
	else if (__tmp > 65535)
    1dbc:	6d 89       	ldd	r22, Y+21	; 0x15
    1dbe:	7e 89       	ldd	r23, Y+22	; 0x16
    1dc0:	8f 89       	ldd	r24, Y+23	; 0x17
    1dc2:	98 8d       	ldd	r25, Y+24	; 0x18
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	3f ef       	ldi	r19, 0xFF	; 255
    1dc8:	4f e7       	ldi	r20, 0x7F	; 127
    1dca:	57 e4       	ldi	r21, 0x47	; 71
    1dcc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dd0:	18 16       	cp	r1, r24
    1dd2:	4c f5       	brge	.+82     	; 0x1e26 <main+0x550>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd4:	69 8d       	ldd	r22, Y+25	; 0x19
    1dd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e2       	ldi	r20, 0x20	; 32
    1de2:	51 e4       	ldi	r21, 0x41	; 65
    1de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	bc 01       	movw	r22, r24
    1dee:	cd 01       	movw	r24, r26
    1df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	9c 8b       	std	Y+20, r25	; 0x14
    1dfa:	8b 8b       	std	Y+19, r24	; 0x13
    1dfc:	0f c0       	rjmp	.+30     	; 0x1e1c <main+0x546>
    1dfe:	84 e1       	ldi	r24, 0x14	; 20
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	9a 8b       	std	Y+18, r25	; 0x12
    1e04:	89 8b       	std	Y+17, r24	; 0x11
    1e06:	89 89       	ldd	r24, Y+17	; 0x11
    1e08:	9a 89       	ldd	r25, Y+18	; 0x12
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	f1 f7       	brne	.-4      	; 0x1e0a <main+0x534>
    1e0e:	9a 8b       	std	Y+18, r25	; 0x12
    1e10:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e12:	8b 89       	ldd	r24, Y+19	; 0x13
    1e14:	9c 89       	ldd	r25, Y+20	; 0x14
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	9c 8b       	std	Y+20, r25	; 0x14
    1e1a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e20:	00 97       	sbiw	r24, 0x00	; 0
    1e22:	69 f7       	brne	.-38     	; 0x1dfe <main+0x528>
    1e24:	bd c0       	rjmp	.+378    	; 0x1fa0 <main+0x6ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e26:	6d 89       	ldd	r22, Y+21	; 0x15
    1e28:	7e 89       	ldd	r23, Y+22	; 0x16
    1e2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	9c 8b       	std	Y+20, r25	; 0x14
    1e38:	8b 8b       	std	Y+19, r24	; 0x13
    1e3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e3e:	98 8b       	std	Y+16, r25	; 0x10
    1e40:	8f 87       	std	Y+15, r24	; 0x0f
    1e42:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e44:	98 89       	ldd	r25, Y+16	; 0x10
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	f1 f7       	brne	.-4      	; 0x1e46 <main+0x570>
    1e4a:	98 8b       	std	Y+16, r25	; 0x10
    1e4c:	8f 87       	std	Y+15, r24	; 0x0f
    1e4e:	a8 c0       	rjmp	.+336    	; 0x1fa0 <main+0x6ca>
				_delay_ms(10);
			}
			else if(lineflag==0)
    1e50:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e52:	88 23       	and	r24, r24
    1e54:	09 f0       	breq	.+2      	; 0x1e58 <main+0x582>
    1e56:	a4 c0       	rjmp	.+328    	; 0x1fa0 <main+0x6ca>
			{
				CLCD_voidWriteCmd(clear);
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	0e 94 38 0b 	call	0x1670	; 0x1670 <CLCD_voidWriteCmd>
				positions[0]+=0x40;
    1e5e:	fe 01       	movw	r30, r28
    1e60:	ee 5b       	subi	r30, 0xBE	; 190
    1e62:	ff 4f       	sbci	r31, 0xFF	; 255
    1e64:	80 81       	ld	r24, Z
    1e66:	80 5c       	subi	r24, 0xC0	; 192
    1e68:	fe 01       	movw	r30, r28
    1e6a:	ee 5b       	subi	r30, 0xBE	; 190
    1e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6e:	80 83       	st	Z, r24
				positions[1]+=0x40;
    1e70:	fe 01       	movw	r30, r28
    1e72:	ee 5b       	subi	r30, 0xBE	; 190
    1e74:	ff 4f       	sbci	r31, 0xFF	; 255
    1e76:	81 81       	ldd	r24, Z+1	; 0x01
    1e78:	80 5c       	subi	r24, 0xC0	; 192
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	ee 5b       	subi	r30, 0xBE	; 190
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	81 83       	std	Z+1, r24	; 0x01
				positions[2]+=0x40;
    1e82:	fe 01       	movw	r30, r28
    1e84:	ee 5b       	subi	r30, 0xBE	; 190
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	82 81       	ldd	r24, Z+2	; 0x02
    1e8a:	80 5c       	subi	r24, 0xC0	; 192
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	ee 5b       	subi	r30, 0xBE	; 190
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	82 83       	std	Z+2, r24	; 0x02
				positions[3]+=0x40;
    1e94:	fe 01       	movw	r30, r28
    1e96:	ee 5b       	subi	r30, 0xBE	; 190
    1e98:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9a:	83 81       	ldd	r24, Z+3	; 0x03
    1e9c:	80 5c       	subi	r24, 0xC0	; 192
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	ee 5b       	subi	r30, 0xBE	; 190
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	83 83       	std	Z+3, r24	; 0x03
				positions[4]+=0x40;
    1ea6:	fe 01       	movw	r30, r28
    1ea8:	ee 5b       	subi	r30, 0xBE	; 190
    1eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1eac:	84 81       	ldd	r24, Z+4	; 0x04
    1eae:	80 5c       	subi	r24, 0xC0	; 192
    1eb0:	fe 01       	movw	r30, r28
    1eb2:	ee 5b       	subi	r30, 0xBE	; 190
    1eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb6:	84 83       	std	Z+4, r24	; 0x04
				lineflag=2;
    1eb8:	82 e0       	ldi	r24, 0x02	; 2
    1eba:	8a af       	std	Y+58, r24	; 0x3a
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	a0 e2       	ldi	r26, 0x20	; 32
    1ec2:	b1 e4       	ldi	r27, 0x41	; 65
    1ec4:	8b 87       	std	Y+11, r24	; 0x0b
    1ec6:	9c 87       	std	Y+12, r25	; 0x0c
    1ec8:	ad 87       	std	Y+13, r26	; 0x0d
    1eca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ecc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ece:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ed0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	48 e4       	ldi	r20, 0x48	; 72
    1eda:	53 e4       	ldi	r21, 0x43	; 67
    1edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	8f 83       	std	Y+7, r24	; 0x07
    1ee6:	98 87       	std	Y+8, r25	; 0x08
    1ee8:	a9 87       	std	Y+9, r26	; 0x09
    1eea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eec:	6f 81       	ldd	r22, Y+7	; 0x07
    1eee:	78 85       	ldd	r23, Y+8	; 0x08
    1ef0:	89 85       	ldd	r24, Y+9	; 0x09
    1ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	40 e8       	ldi	r20, 0x80	; 128
    1efa:	5f e3       	ldi	r21, 0x3F	; 63
    1efc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f00:	88 23       	and	r24, r24
    1f02:	2c f4       	brge	.+10     	; 0x1f0e <main+0x638>
		__ticks = 1;
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	9e 83       	std	Y+6, r25	; 0x06
    1f0a:	8d 83       	std	Y+5, r24	; 0x05
    1f0c:	3f c0       	rjmp	.+126    	; 0x1f8c <main+0x6b6>
	else if (__tmp > 65535)
    1f0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f10:	78 85       	ldd	r23, Y+8	; 0x08
    1f12:	89 85       	ldd	r24, Y+9	; 0x09
    1f14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	3f ef       	ldi	r19, 0xFF	; 255
    1f1a:	4f e7       	ldi	r20, 0x7F	; 127
    1f1c:	57 e4       	ldi	r21, 0x47	; 71
    1f1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f22:	18 16       	cp	r1, r24
    1f24:	4c f5       	brge	.+82     	; 0x1f78 <main+0x6a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	40 e2       	ldi	r20, 0x20	; 32
    1f34:	51 e4       	ldi	r21, 0x41	; 65
    1f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	bc 01       	movw	r22, r24
    1f40:	cd 01       	movw	r24, r26
    1f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	9e 83       	std	Y+6, r25	; 0x06
    1f4c:	8d 83       	std	Y+5, r24	; 0x05
    1f4e:	0f c0       	rjmp	.+30     	; 0x1f6e <main+0x698>
    1f50:	84 e1       	ldi	r24, 0x14	; 20
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	9c 83       	std	Y+4, r25	; 0x04
    1f56:	8b 83       	std	Y+3, r24	; 0x03
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	f1 f7       	brne	.-4      	; 0x1f5c <main+0x686>
    1f60:	9c 83       	std	Y+4, r25	; 0x04
    1f62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f64:	8d 81       	ldd	r24, Y+5	; 0x05
    1f66:	9e 81       	ldd	r25, Y+6	; 0x06
    1f68:	01 97       	sbiw	r24, 0x01	; 1
    1f6a:	9e 83       	std	Y+6, r25	; 0x06
    1f6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f70:	9e 81       	ldd	r25, Y+6	; 0x06
    1f72:	00 97       	sbiw	r24, 0x00	; 0
    1f74:	69 f7       	brne	.-38     	; 0x1f50 <main+0x67a>
    1f76:	14 c0       	rjmp	.+40     	; 0x1fa0 <main+0x6ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f78:	6f 81       	ldd	r22, Y+7	; 0x07
    1f7a:	78 85       	ldd	r23, Y+8	; 0x08
    1f7c:	89 85       	ldd	r24, Y+9	; 0x09
    1f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	9e 83       	std	Y+6, r25	; 0x06
    1f8a:	8d 83       	std	Y+5, r24	; 0x05
    1f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f90:	9a 83       	std	Y+2, r25	; 0x02
    1f92:	89 83       	std	Y+1, r24	; 0x01
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
    1f96:	9a 81       	ldd	r25, Y+2	; 0x02
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	f1 f7       	brne	.-4      	; 0x1f98 <main+0x6c2>
    1f9c:	9a 83       	std	Y+2, r25	; 0x02
    1f9e:	89 83       	std	Y+1, r24	; 0x01
direction 0 -> left
lineflag  1 -> bottom line
lineflag  0 -> upper line
*/

		if((lineflag==1)&&(positions[4]>screenLowerRigtLimit))directionFlag=0;
    1fa0:	8a ad       	ldd	r24, Y+58	; 0x3a
    1fa2:	81 30       	cpi	r24, 0x01	; 1
    1fa4:	41 f4       	brne	.+16     	; 0x1fb6 <main+0x6e0>
    1fa6:	fe 01       	movw	r30, r28
    1fa8:	ee 5b       	subi	r30, 0xBE	; 190
    1faa:	ff 4f       	sbci	r31, 0xFF	; 255
    1fac:	84 81       	ldd	r24, Z+4	; 0x04
    1fae:	80 35       	cpi	r24, 0x50	; 80
    1fb0:	10 f0       	brcs	.+4      	; 0x1fb6 <main+0x6e0>
    1fb2:	19 ae       	std	Y+57, r1	; 0x39
    1fb4:	0b c0       	rjmp	.+22     	; 0x1fcc <main+0x6f6>
		else if((lineflag==1)&&(positions[0]<screenLowerLeftLimit))directionFlag=1;
    1fb6:	8a ad       	ldd	r24, Y+58	; 0x3a
    1fb8:	81 30       	cpi	r24, 0x01	; 1
    1fba:	41 f4       	brne	.+16     	; 0x1fcc <main+0x6f6>
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	ee 5b       	subi	r30, 0xBE	; 190
    1fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc2:	80 81       	ld	r24, Z
    1fc4:	80 34       	cpi	r24, 0x40	; 64
    1fc6:	10 f4       	brcc	.+4      	; 0x1fcc <main+0x6f6>
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	89 af       	std	Y+57, r24	; 0x39
		if((lineflag==0)&&(positions[4]>screenUpperRigtLimit))directionFlag=0;
    1fcc:	8a ad       	ldd	r24, Y+58	; 0x3a
    1fce:	88 23       	and	r24, r24
    1fd0:	09 f0       	breq	.+2      	; 0x1fd4 <main+0x6fe>
    1fd2:	07 cd       	rjmp	.-1522   	; 0x19e2 <main+0x10c>
    1fd4:	fe 01       	movw	r30, r28
    1fd6:	ee 5b       	subi	r30, 0xBE	; 190
    1fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fda:	84 81       	ldd	r24, Z+4	; 0x04
    1fdc:	80 31       	cpi	r24, 0x10	; 16
    1fde:	08 f4       	brcc	.+2      	; 0x1fe2 <main+0x70c>
    1fe0:	00 cd       	rjmp	.-1536   	; 0x19e2 <main+0x10c>
    1fe2:	19 ae       	std	Y+57, r1	; 0x39
    1fe4:	fe cc       	rjmp	.-1540   	; 0x19e2 <main+0x10c>

00001fe6 <__prologue_saves__>:
    1fe6:	2f 92       	push	r2
    1fe8:	3f 92       	push	r3
    1fea:	4f 92       	push	r4
    1fec:	5f 92       	push	r5
    1fee:	6f 92       	push	r6
    1ff0:	7f 92       	push	r7
    1ff2:	8f 92       	push	r8
    1ff4:	9f 92       	push	r9
    1ff6:	af 92       	push	r10
    1ff8:	bf 92       	push	r11
    1ffa:	cf 92       	push	r12
    1ffc:	df 92       	push	r13
    1ffe:	ef 92       	push	r14
    2000:	ff 92       	push	r15
    2002:	0f 93       	push	r16
    2004:	1f 93       	push	r17
    2006:	cf 93       	push	r28
    2008:	df 93       	push	r29
    200a:	cd b7       	in	r28, 0x3d	; 61
    200c:	de b7       	in	r29, 0x3e	; 62
    200e:	ca 1b       	sub	r28, r26
    2010:	db 0b       	sbc	r29, r27
    2012:	0f b6       	in	r0, 0x3f	; 63
    2014:	f8 94       	cli
    2016:	de bf       	out	0x3e, r29	; 62
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	cd bf       	out	0x3d, r28	; 61
    201c:	09 94       	ijmp

0000201e <__epilogue_restores__>:
    201e:	2a 88       	ldd	r2, Y+18	; 0x12
    2020:	39 88       	ldd	r3, Y+17	; 0x11
    2022:	48 88       	ldd	r4, Y+16	; 0x10
    2024:	5f 84       	ldd	r5, Y+15	; 0x0f
    2026:	6e 84       	ldd	r6, Y+14	; 0x0e
    2028:	7d 84       	ldd	r7, Y+13	; 0x0d
    202a:	8c 84       	ldd	r8, Y+12	; 0x0c
    202c:	9b 84       	ldd	r9, Y+11	; 0x0b
    202e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2030:	b9 84       	ldd	r11, Y+9	; 0x09
    2032:	c8 84       	ldd	r12, Y+8	; 0x08
    2034:	df 80       	ldd	r13, Y+7	; 0x07
    2036:	ee 80       	ldd	r14, Y+6	; 0x06
    2038:	fd 80       	ldd	r15, Y+5	; 0x05
    203a:	0c 81       	ldd	r16, Y+4	; 0x04
    203c:	1b 81       	ldd	r17, Y+3	; 0x03
    203e:	aa 81       	ldd	r26, Y+2	; 0x02
    2040:	b9 81       	ldd	r27, Y+1	; 0x01
    2042:	ce 0f       	add	r28, r30
    2044:	d1 1d       	adc	r29, r1
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	f8 94       	cli
    204a:	de bf       	out	0x3e, r29	; 62
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	cd bf       	out	0x3d, r28	; 61
    2050:	ed 01       	movw	r28, r26
    2052:	08 95       	ret

00002054 <_exit>:
    2054:	f8 94       	cli

00002056 <__stop_program>:
    2056:	ff cf       	rjmp	.-2      	; 0x2056 <__stop_program>
