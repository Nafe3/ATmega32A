
LED_DIP_SWITCHES.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000606  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000774  00000000  00000000  0000065c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000032c  00000000  00000000  00000dd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 b6 02 	call	0x56c	; 0x56c <main>
  64:	0c 94 01 03 	jmp	0x602	; 0x602 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <setPinDir>:
#include "DIO_private.h"
#include "DIO_register.h"
#include "DIO_config.h"

void setPinDir(u8 Port, u8 Pin, u8 Dir)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <setPinDir+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <setPinDir+0x8>
  74:	0f 92       	push	r0
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	89 83       	std	Y+1, r24	; 0x01
  7c:	6a 83       	std	Y+2, r22	; 0x02
  7e:	4b 83       	std	Y+3, r20	; 0x03
	switch (Port)
  80:	89 81       	ldd	r24, Y+1	; 0x01
  82:	28 2f       	mov	r18, r24
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	3d 83       	std	Y+5, r19	; 0x05
  88:	2c 83       	std	Y+4, r18	; 0x04
  8a:	8c 81       	ldd	r24, Y+4	; 0x04
  8c:	9d 81       	ldd	r25, Y+5	; 0x05
  8e:	82 34       	cpi	r24, 0x42	; 66
  90:	91 05       	cpc	r25, r1
  92:	09 f4       	brne	.+2      	; 0x96 <setPinDir+0x2a>
  94:	44 c0       	rjmp	.+136    	; 0x11e <setPinDir+0xb2>
  96:	2c 81       	ldd	r18, Y+4	; 0x04
  98:	3d 81       	ldd	r19, Y+5	; 0x05
  9a:	23 34       	cpi	r18, 0x43	; 67
  9c:	31 05       	cpc	r19, r1
  9e:	34 f4       	brge	.+12     	; 0xac <setPinDir+0x40>
  a0:	8c 81       	ldd	r24, Y+4	; 0x04
  a2:	9d 81       	ldd	r25, Y+5	; 0x05
  a4:	81 34       	cpi	r24, 0x41	; 65
  a6:	91 05       	cpc	r25, r1
  a8:	71 f0       	breq	.+28     	; 0xc6 <setPinDir+0x5a>
  aa:	bc c0       	rjmp	.+376    	; 0x224 <setPinDir+0x1b8>
  ac:	2c 81       	ldd	r18, Y+4	; 0x04
  ae:	3d 81       	ldd	r19, Y+5	; 0x05
  b0:	23 34       	cpi	r18, 0x43	; 67
  b2:	31 05       	cpc	r19, r1
  b4:	09 f4       	brne	.+2      	; 0xb8 <setPinDir+0x4c>
  b6:	5f c0       	rjmp	.+190    	; 0x176 <setPinDir+0x10a>
  b8:	8c 81       	ldd	r24, Y+4	; 0x04
  ba:	9d 81       	ldd	r25, Y+5	; 0x05
  bc:	84 34       	cpi	r24, 0x44	; 68
  be:	91 05       	cpc	r25, r1
  c0:	09 f4       	brne	.+2      	; 0xc4 <setPinDir+0x58>
  c2:	85 c0       	rjmp	.+266    	; 0x1ce <setPinDir+0x162>
  c4:	af c0       	rjmp	.+350    	; 0x224 <setPinDir+0x1b8>
	{
		case 'A':
		{
			if (Dir==0)
  c6:	8b 81       	ldd	r24, Y+3	; 0x03
  c8:	88 23       	and	r24, r24
  ca:	a9 f4       	brne	.+42     	; 0xf6 <setPinDir+0x8a>
			{
				CLR_BIT(DDRA,Pin);
  cc:	aa e3       	ldi	r26, 0x3A	; 58
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	ea e3       	ldi	r30, 0x3A	; 58
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	48 2f       	mov	r20, r24
  d8:	8a 81       	ldd	r24, Y+2	; 0x02
  da:	28 2f       	mov	r18, r24
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 2e       	mov	r0, r18
  e4:	02 c0       	rjmp	.+4      	; 0xea <setPinDir+0x7e>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	0a 94       	dec	r0
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <setPinDir+0x7a>
  ee:	80 95       	com	r24
  f0:	84 23       	and	r24, r20
  f2:	8c 93       	st	X, r24
  f4:	97 c0       	rjmp	.+302    	; 0x224 <setPinDir+0x1b8>
			}
			else
			{
				SET_BIT(DDRA,Pin);
  f6:	aa e3       	ldi	r26, 0x3A	; 58
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	ea e3       	ldi	r30, 0x3A	; 58
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	48 2f       	mov	r20, r24
 102:	8a 81       	ldd	r24, Y+2	; 0x02
 104:	28 2f       	mov	r18, r24
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 2e       	mov	r0, r18
 10e:	02 c0       	rjmp	.+4      	; 0x114 <setPinDir+0xa8>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	0a 94       	dec	r0
 116:	e2 f7       	brpl	.-8      	; 0x110 <setPinDir+0xa4>
 118:	84 2b       	or	r24, r20
 11a:	8c 93       	st	X, r24
 11c:	83 c0       	rjmp	.+262    	; 0x224 <setPinDir+0x1b8>
			}
			break;
		}
		case 'B':
		{
			if (Dir==0)
 11e:	8b 81       	ldd	r24, Y+3	; 0x03
 120:	88 23       	and	r24, r24
 122:	a9 f4       	brne	.+42     	; 0x14e <setPinDir+0xe2>
			{
				CLR_BIT(DDRB,Pin);
 124:	a7 e3       	ldi	r26, 0x37	; 55
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	e7 e3       	ldi	r30, 0x37	; 55
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	48 2f       	mov	r20, r24
 130:	8a 81       	ldd	r24, Y+2	; 0x02
 132:	28 2f       	mov	r18, r24
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 2e       	mov	r0, r18
 13c:	02 c0       	rjmp	.+4      	; 0x142 <setPinDir+0xd6>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	0a 94       	dec	r0
 144:	e2 f7       	brpl	.-8      	; 0x13e <setPinDir+0xd2>
 146:	80 95       	com	r24
 148:	84 23       	and	r24, r20
 14a:	8c 93       	st	X, r24
 14c:	6b c0       	rjmp	.+214    	; 0x224 <setPinDir+0x1b8>
			}
			else
			{
				SET_BIT(DDRB,Pin);
 14e:	a7 e3       	ldi	r26, 0x37	; 55
 150:	b0 e0       	ldi	r27, 0x00	; 0
 152:	e7 e3       	ldi	r30, 0x37	; 55
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	48 2f       	mov	r20, r24
 15a:	8a 81       	ldd	r24, Y+2	; 0x02
 15c:	28 2f       	mov	r18, r24
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	02 2e       	mov	r0, r18
 166:	02 c0       	rjmp	.+4      	; 0x16c <setPinDir+0x100>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	0a 94       	dec	r0
 16e:	e2 f7       	brpl	.-8      	; 0x168 <setPinDir+0xfc>
 170:	84 2b       	or	r24, r20
 172:	8c 93       	st	X, r24
 174:	57 c0       	rjmp	.+174    	; 0x224 <setPinDir+0x1b8>
			}
			break;
		}
		case 'C':
		{
			if (Dir==0)
 176:	8b 81       	ldd	r24, Y+3	; 0x03
 178:	88 23       	and	r24, r24
 17a:	a9 f4       	brne	.+42     	; 0x1a6 <setPinDir+0x13a>
			{
				CLR_BIT(DDRC,Pin);
 17c:	a4 e3       	ldi	r26, 0x34	; 52
 17e:	b0 e0       	ldi	r27, 0x00	; 0
 180:	e4 e3       	ldi	r30, 0x34	; 52
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	48 2f       	mov	r20, r24
 188:	8a 81       	ldd	r24, Y+2	; 0x02
 18a:	28 2f       	mov	r18, r24
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 2e       	mov	r0, r18
 194:	02 c0       	rjmp	.+4      	; 0x19a <setPinDir+0x12e>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	0a 94       	dec	r0
 19c:	e2 f7       	brpl	.-8      	; 0x196 <setPinDir+0x12a>
 19e:	80 95       	com	r24
 1a0:	84 23       	and	r24, r20
 1a2:	8c 93       	st	X, r24
 1a4:	3f c0       	rjmp	.+126    	; 0x224 <setPinDir+0x1b8>
			}
			else
			{
				SET_BIT(DDRC,Pin);
 1a6:	a4 e3       	ldi	r26, 0x34	; 52
 1a8:	b0 e0       	ldi	r27, 0x00	; 0
 1aa:	e4 e3       	ldi	r30, 0x34	; 52
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	48 2f       	mov	r20, r24
 1b2:	8a 81       	ldd	r24, Y+2	; 0x02
 1b4:	28 2f       	mov	r18, r24
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 2e       	mov	r0, r18
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <setPinDir+0x158>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	0a 94       	dec	r0
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <setPinDir+0x154>
 1c8:	84 2b       	or	r24, r20
 1ca:	8c 93       	st	X, r24
 1cc:	2b c0       	rjmp	.+86     	; 0x224 <setPinDir+0x1b8>
			}
			break;
		}
		case 'D':
		{
			if (Dir==0)
 1ce:	8b 81       	ldd	r24, Y+3	; 0x03
 1d0:	88 23       	and	r24, r24
 1d2:	a9 f4       	brne	.+42     	; 0x1fe <setPinDir+0x192>
			{
				CLR_BIT(DDRD,Pin);
 1d4:	a1 e3       	ldi	r26, 0x31	; 49
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
 1d8:	e1 e3       	ldi	r30, 0x31	; 49
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	48 2f       	mov	r20, r24
 1e0:	8a 81       	ldd	r24, Y+2	; 0x02
 1e2:	28 2f       	mov	r18, r24
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 2e       	mov	r0, r18
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <setPinDir+0x186>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	0a 94       	dec	r0
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <setPinDir+0x182>
 1f6:	80 95       	com	r24
 1f8:	84 23       	and	r24, r20
 1fa:	8c 93       	st	X, r24
 1fc:	13 c0       	rjmp	.+38     	; 0x224 <setPinDir+0x1b8>
			}
			else
			{
				SET_BIT(DDRD,Pin);
 1fe:	a1 e3       	ldi	r26, 0x31	; 49
 200:	b0 e0       	ldi	r27, 0x00	; 0
 202:	e1 e3       	ldi	r30, 0x31	; 49
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	48 2f       	mov	r20, r24
 20a:	8a 81       	ldd	r24, Y+2	; 0x02
 20c:	28 2f       	mov	r18, r24
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 2e       	mov	r0, r18
 216:	02 c0       	rjmp	.+4      	; 0x21c <setPinDir+0x1b0>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	0a 94       	dec	r0
 21e:	e2 f7       	brpl	.-8      	; 0x218 <setPinDir+0x1ac>
 220:	84 2b       	or	r24, r20
 222:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 224:	0f 90       	pop	r0
 226:	0f 90       	pop	r0
 228:	0f 90       	pop	r0
 22a:	0f 90       	pop	r0
 22c:	0f 90       	pop	r0
 22e:	cf 91       	pop	r28
 230:	df 91       	pop	r29
 232:	08 95       	ret

00000234 <setPinValue>:


void setPinValue(u8 Port, u8 Pin, u8 Val)
{
 234:	df 93       	push	r29
 236:	cf 93       	push	r28
 238:	00 d0       	rcall	.+0      	; 0x23a <setPinValue+0x6>
 23a:	00 d0       	rcall	.+0      	; 0x23c <setPinValue+0x8>
 23c:	0f 92       	push	r0
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
 242:	89 83       	std	Y+1, r24	; 0x01
 244:	6a 83       	std	Y+2, r22	; 0x02
 246:	4b 83       	std	Y+3, r20	; 0x03
	switch (Port)
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	28 2f       	mov	r18, r24
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	3d 83       	std	Y+5, r19	; 0x05
 250:	2c 83       	std	Y+4, r18	; 0x04
 252:	8c 81       	ldd	r24, Y+4	; 0x04
 254:	9d 81       	ldd	r25, Y+5	; 0x05
 256:	82 34       	cpi	r24, 0x42	; 66
 258:	91 05       	cpc	r25, r1
 25a:	09 f4       	brne	.+2      	; 0x25e <setPinValue+0x2a>
 25c:	44 c0       	rjmp	.+136    	; 0x2e6 <setPinValue+0xb2>
 25e:	2c 81       	ldd	r18, Y+4	; 0x04
 260:	3d 81       	ldd	r19, Y+5	; 0x05
 262:	23 34       	cpi	r18, 0x43	; 67
 264:	31 05       	cpc	r19, r1
 266:	34 f4       	brge	.+12     	; 0x274 <setPinValue+0x40>
 268:	8c 81       	ldd	r24, Y+4	; 0x04
 26a:	9d 81       	ldd	r25, Y+5	; 0x05
 26c:	81 34       	cpi	r24, 0x41	; 65
 26e:	91 05       	cpc	r25, r1
 270:	71 f0       	breq	.+28     	; 0x28e <setPinValue+0x5a>
 272:	bc c0       	rjmp	.+376    	; 0x3ec <setPinValue+0x1b8>
 274:	2c 81       	ldd	r18, Y+4	; 0x04
 276:	3d 81       	ldd	r19, Y+5	; 0x05
 278:	23 34       	cpi	r18, 0x43	; 67
 27a:	31 05       	cpc	r19, r1
 27c:	09 f4       	brne	.+2      	; 0x280 <setPinValue+0x4c>
 27e:	5f c0       	rjmp	.+190    	; 0x33e <setPinValue+0x10a>
 280:	8c 81       	ldd	r24, Y+4	; 0x04
 282:	9d 81       	ldd	r25, Y+5	; 0x05
 284:	84 34       	cpi	r24, 0x44	; 68
 286:	91 05       	cpc	r25, r1
 288:	09 f4       	brne	.+2      	; 0x28c <setPinValue+0x58>
 28a:	85 c0       	rjmp	.+266    	; 0x396 <setPinValue+0x162>
 28c:	af c0       	rjmp	.+350    	; 0x3ec <setPinValue+0x1b8>
	{
		case 'A':
		{
			if (Val==0)
 28e:	8b 81       	ldd	r24, Y+3	; 0x03
 290:	88 23       	and	r24, r24
 292:	a9 f4       	brne	.+42     	; 0x2be <setPinValue+0x8a>
			{
				CLR_BIT(PORTA,Pin);
 294:	ab e3       	ldi	r26, 0x3B	; 59
 296:	b0 e0       	ldi	r27, 0x00	; 0
 298:	eb e3       	ldi	r30, 0x3B	; 59
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	80 81       	ld	r24, Z
 29e:	48 2f       	mov	r20, r24
 2a0:	8a 81       	ldd	r24, Y+2	; 0x02
 2a2:	28 2f       	mov	r18, r24
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	02 2e       	mov	r0, r18
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <setPinValue+0x7e>
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	0a 94       	dec	r0
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <setPinValue+0x7a>
 2b6:	80 95       	com	r24
 2b8:	84 23       	and	r24, r20
 2ba:	8c 93       	st	X, r24
 2bc:	97 c0       	rjmp	.+302    	; 0x3ec <setPinValue+0x1b8>
			}
			else
			{
				SET_BIT(PORTA,Pin);
 2be:	ab e3       	ldi	r26, 0x3B	; 59
 2c0:	b0 e0       	ldi	r27, 0x00	; 0
 2c2:	eb e3       	ldi	r30, 0x3B	; 59
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	48 2f       	mov	r20, r24
 2ca:	8a 81       	ldd	r24, Y+2	; 0x02
 2cc:	28 2f       	mov	r18, r24
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	02 2e       	mov	r0, r18
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <setPinValue+0xa8>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	0a 94       	dec	r0
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <setPinValue+0xa4>
 2e0:	84 2b       	or	r24, r20
 2e2:	8c 93       	st	X, r24
 2e4:	83 c0       	rjmp	.+262    	; 0x3ec <setPinValue+0x1b8>
			}
			break;
		}
		case 'B':
		{
			if (Val==0)
 2e6:	8b 81       	ldd	r24, Y+3	; 0x03
 2e8:	88 23       	and	r24, r24
 2ea:	a9 f4       	brne	.+42     	; 0x316 <setPinValue+0xe2>
			{
				CLR_BIT(PORTB,Pin);
 2ec:	a8 e3       	ldi	r26, 0x38	; 56
 2ee:	b0 e0       	ldi	r27, 0x00	; 0
 2f0:	e8 e3       	ldi	r30, 0x38	; 56
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	80 81       	ld	r24, Z
 2f6:	48 2f       	mov	r20, r24
 2f8:	8a 81       	ldd	r24, Y+2	; 0x02
 2fa:	28 2f       	mov	r18, r24
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	02 2e       	mov	r0, r18
 304:	02 c0       	rjmp	.+4      	; 0x30a <setPinValue+0xd6>
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	0a 94       	dec	r0
 30c:	e2 f7       	brpl	.-8      	; 0x306 <setPinValue+0xd2>
 30e:	80 95       	com	r24
 310:	84 23       	and	r24, r20
 312:	8c 93       	st	X, r24
 314:	6b c0       	rjmp	.+214    	; 0x3ec <setPinValue+0x1b8>
			}
			else
			{
				SET_BIT(PORTB,Pin);;
 316:	a8 e3       	ldi	r26, 0x38	; 56
 318:	b0 e0       	ldi	r27, 0x00	; 0
 31a:	e8 e3       	ldi	r30, 0x38	; 56
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	48 2f       	mov	r20, r24
 322:	8a 81       	ldd	r24, Y+2	; 0x02
 324:	28 2f       	mov	r18, r24
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	02 2e       	mov	r0, r18
 32e:	02 c0       	rjmp	.+4      	; 0x334 <setPinValue+0x100>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	0a 94       	dec	r0
 336:	e2 f7       	brpl	.-8      	; 0x330 <setPinValue+0xfc>
 338:	84 2b       	or	r24, r20
 33a:	8c 93       	st	X, r24
 33c:	57 c0       	rjmp	.+174    	; 0x3ec <setPinValue+0x1b8>
			break;
		}
		
		case 'C':
		{
			if (Val==0)
 33e:	8b 81       	ldd	r24, Y+3	; 0x03
 340:	88 23       	and	r24, r24
 342:	a9 f4       	brne	.+42     	; 0x36e <setPinValue+0x13a>
			{
				CLR_BIT(PORTC,Pin);
 344:	a5 e3       	ldi	r26, 0x35	; 53
 346:	b0 e0       	ldi	r27, 0x00	; 0
 348:	e5 e3       	ldi	r30, 0x35	; 53
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	48 2f       	mov	r20, r24
 350:	8a 81       	ldd	r24, Y+2	; 0x02
 352:	28 2f       	mov	r18, r24
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 2e       	mov	r0, r18
 35c:	02 c0       	rjmp	.+4      	; 0x362 <setPinValue+0x12e>
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	0a 94       	dec	r0
 364:	e2 f7       	brpl	.-8      	; 0x35e <setPinValue+0x12a>
 366:	80 95       	com	r24
 368:	84 23       	and	r24, r20
 36a:	8c 93       	st	X, r24
 36c:	3f c0       	rjmp	.+126    	; 0x3ec <setPinValue+0x1b8>
			}
			else
			{
				SET_BIT(PORTC,Pin);
 36e:	a5 e3       	ldi	r26, 0x35	; 53
 370:	b0 e0       	ldi	r27, 0x00	; 0
 372:	e5 e3       	ldi	r30, 0x35	; 53
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	80 81       	ld	r24, Z
 378:	48 2f       	mov	r20, r24
 37a:	8a 81       	ldd	r24, Y+2	; 0x02
 37c:	28 2f       	mov	r18, r24
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	02 2e       	mov	r0, r18
 386:	02 c0       	rjmp	.+4      	; 0x38c <setPinValue+0x158>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	0a 94       	dec	r0
 38e:	e2 f7       	brpl	.-8      	; 0x388 <setPinValue+0x154>
 390:	84 2b       	or	r24, r20
 392:	8c 93       	st	X, r24
 394:	2b c0       	rjmp	.+86     	; 0x3ec <setPinValue+0x1b8>
			}
			break;
		}
		case 'D':
		{
			if (Val==0)
 396:	8b 81       	ldd	r24, Y+3	; 0x03
 398:	88 23       	and	r24, r24
 39a:	a9 f4       	brne	.+42     	; 0x3c6 <setPinValue+0x192>
			{
				CLR_BIT(PORTD,Pin);
 39c:	a2 e3       	ldi	r26, 0x32	; 50
 39e:	b0 e0       	ldi	r27, 0x00	; 0
 3a0:	e2 e3       	ldi	r30, 0x32	; 50
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	80 81       	ld	r24, Z
 3a6:	48 2f       	mov	r20, r24
 3a8:	8a 81       	ldd	r24, Y+2	; 0x02
 3aa:	28 2f       	mov	r18, r24
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	02 2e       	mov	r0, r18
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <setPinValue+0x186>
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	0a 94       	dec	r0
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <setPinValue+0x182>
 3be:	80 95       	com	r24
 3c0:	84 23       	and	r24, r20
 3c2:	8c 93       	st	X, r24
 3c4:	13 c0       	rjmp	.+38     	; 0x3ec <setPinValue+0x1b8>
			}
			else
			{
				SET_BIT(PORTD,Pin);
 3c6:	a2 e3       	ldi	r26, 0x32	; 50
 3c8:	b0 e0       	ldi	r27, 0x00	; 0
 3ca:	e2 e3       	ldi	r30, 0x32	; 50
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	80 81       	ld	r24, Z
 3d0:	48 2f       	mov	r20, r24
 3d2:	8a 81       	ldd	r24, Y+2	; 0x02
 3d4:	28 2f       	mov	r18, r24
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	02 2e       	mov	r0, r18
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <setPinValue+0x1b0>
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	0a 94       	dec	r0
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <setPinValue+0x1ac>
 3e8:	84 2b       	or	r24, r20
 3ea:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 3ec:	0f 90       	pop	r0
 3ee:	0f 90       	pop	r0
 3f0:	0f 90       	pop	r0
 3f2:	0f 90       	pop	r0
 3f4:	0f 90       	pop	r0
 3f6:	cf 91       	pop	r28
 3f8:	df 91       	pop	r29
 3fa:	08 95       	ret

000003fc <getPinValue>:

u8 getPinValue(u8 Port, u8 pin)
{
 3fc:	df 93       	push	r29
 3fe:	cf 93       	push	r28
 400:	00 d0       	rcall	.+0      	; 0x402 <getPinValue+0x6>
 402:	00 d0       	rcall	.+0      	; 0x404 <getPinValue+0x8>
 404:	0f 92       	push	r0
 406:	cd b7       	in	r28, 0x3d	; 61
 408:	de b7       	in	r29, 0x3e	; 62
 40a:	8a 83       	std	Y+2, r24	; 0x02
 40c:	6b 83       	std	Y+3, r22	; 0x03
	u8 result;
	
	switch (Port)
 40e:	8a 81       	ldd	r24, Y+2	; 0x02
 410:	28 2f       	mov	r18, r24
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	3d 83       	std	Y+5, r19	; 0x05
 416:	2c 83       	std	Y+4, r18	; 0x04
 418:	4c 81       	ldd	r20, Y+4	; 0x04
 41a:	5d 81       	ldd	r21, Y+5	; 0x05
 41c:	42 34       	cpi	r20, 0x42	; 66
 41e:	51 05       	cpc	r21, r1
 420:	41 f1       	breq	.+80     	; 0x472 <getPinValue+0x76>
 422:	8c 81       	ldd	r24, Y+4	; 0x04
 424:	9d 81       	ldd	r25, Y+5	; 0x05
 426:	83 34       	cpi	r24, 0x43	; 67
 428:	91 05       	cpc	r25, r1
 42a:	34 f4       	brge	.+12     	; 0x438 <getPinValue+0x3c>
 42c:	2c 81       	ldd	r18, Y+4	; 0x04
 42e:	3d 81       	ldd	r19, Y+5	; 0x05
 430:	21 34       	cpi	r18, 0x41	; 65
 432:	31 05       	cpc	r19, r1
 434:	61 f0       	breq	.+24     	; 0x44e <getPinValue+0x52>
 436:	52 c0       	rjmp	.+164    	; 0x4dc <getPinValue+0xe0>
 438:	4c 81       	ldd	r20, Y+4	; 0x04
 43a:	5d 81       	ldd	r21, Y+5	; 0x05
 43c:	43 34       	cpi	r20, 0x43	; 67
 43e:	51 05       	cpc	r21, r1
 440:	51 f1       	breq	.+84     	; 0x496 <getPinValue+0x9a>
 442:	8c 81       	ldd	r24, Y+4	; 0x04
 444:	9d 81       	ldd	r25, Y+5	; 0x05
 446:	84 34       	cpi	r24, 0x44	; 68
 448:	91 05       	cpc	r25, r1
 44a:	b9 f1       	breq	.+110    	; 0x4ba <getPinValue+0xbe>
 44c:	47 c0       	rjmp	.+142    	; 0x4dc <getPinValue+0xe0>
	{
		case 'A':
		{
			result=GET_BIT(PINA, pin);
 44e:	e9 e3       	ldi	r30, 0x39	; 57
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	80 81       	ld	r24, Z
 454:	28 2f       	mov	r18, r24
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	8b 81       	ldd	r24, Y+3	; 0x03
 45a:	88 2f       	mov	r24, r24
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	a9 01       	movw	r20, r18
 460:	02 c0       	rjmp	.+4      	; 0x466 <getPinValue+0x6a>
 462:	55 95       	asr	r21
 464:	47 95       	ror	r20
 466:	8a 95       	dec	r24
 468:	e2 f7       	brpl	.-8      	; 0x462 <getPinValue+0x66>
 46a:	ca 01       	movw	r24, r20
 46c:	81 70       	andi	r24, 0x01	; 1
 46e:	89 83       	std	Y+1, r24	; 0x01
 470:	35 c0       	rjmp	.+106    	; 0x4dc <getPinValue+0xe0>
			break;
		}
		case 'B':
		{
			result=GET_BIT(PINB, pin);
 472:	e6 e3       	ldi	r30, 0x36	; 54
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	80 81       	ld	r24, Z
 478:	28 2f       	mov	r18, r24
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	8b 81       	ldd	r24, Y+3	; 0x03
 47e:	88 2f       	mov	r24, r24
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	a9 01       	movw	r20, r18
 484:	02 c0       	rjmp	.+4      	; 0x48a <getPinValue+0x8e>
 486:	55 95       	asr	r21
 488:	47 95       	ror	r20
 48a:	8a 95       	dec	r24
 48c:	e2 f7       	brpl	.-8      	; 0x486 <getPinValue+0x8a>
 48e:	ca 01       	movw	r24, r20
 490:	81 70       	andi	r24, 0x01	; 1
 492:	89 83       	std	Y+1, r24	; 0x01
 494:	23 c0       	rjmp	.+70     	; 0x4dc <getPinValue+0xe0>
			break;
		}
		
		case 'C':
		{
			result=GET_BIT(PINC, pin);
 496:	e3 e3       	ldi	r30, 0x33	; 51
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	80 81       	ld	r24, Z
 49c:	28 2f       	mov	r18, r24
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	8b 81       	ldd	r24, Y+3	; 0x03
 4a2:	88 2f       	mov	r24, r24
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	a9 01       	movw	r20, r18
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <getPinValue+0xb2>
 4aa:	55 95       	asr	r21
 4ac:	47 95       	ror	r20
 4ae:	8a 95       	dec	r24
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <getPinValue+0xae>
 4b2:	ca 01       	movw	r24, r20
 4b4:	81 70       	andi	r24, 0x01	; 1
 4b6:	89 83       	std	Y+1, r24	; 0x01
 4b8:	11 c0       	rjmp	.+34     	; 0x4dc <getPinValue+0xe0>
			break;
		}
		case 'D':
		{
			result=GET_BIT(PIND, pin);
 4ba:	e0 e3       	ldi	r30, 0x30	; 48
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	80 81       	ld	r24, Z
 4c0:	28 2f       	mov	r18, r24
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	8b 81       	ldd	r24, Y+3	; 0x03
 4c6:	88 2f       	mov	r24, r24
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	a9 01       	movw	r20, r18
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <getPinValue+0xd6>
 4ce:	55 95       	asr	r21
 4d0:	47 95       	ror	r20
 4d2:	8a 95       	dec	r24
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <getPinValue+0xd2>
 4d6:	ca 01       	movw	r24, r20
 4d8:	81 70       	andi	r24, 0x01	; 1
 4da:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return result;
 4dc:	89 81       	ldd	r24, Y+1	; 0x01
}
 4de:	0f 90       	pop	r0
 4e0:	0f 90       	pop	r0
 4e2:	0f 90       	pop	r0
 4e4:	0f 90       	pop	r0
 4e6:	0f 90       	pop	r0
 4e8:	cf 91       	pop	r28
 4ea:	df 91       	pop	r29
 4ec:	08 95       	ret

000004ee <setLedOn>:
#include "LED_PRIVATE.h"
#include "LED_CONFIG.h"


void setLedOn  (void)
{
 4ee:	df 93       	push	r29
 4f0:	cf 93       	push	r28
 4f2:	cd b7       	in	r28, 0x3d	; 61
 4f4:	de b7       	in	r29, 0x3e	; 62
	setPinValue(LED_Port, LED_Pin, LED_Mode);
 4f6:	81 e4       	ldi	r24, 0x41	; 65
 4f8:	60 e0       	ldi	r22, 0x00	; 0
 4fa:	41 e0       	ldi	r20, 0x01	; 1
 4fc:	0e 94 1a 01 	call	0x234	; 0x234 <setPinValue>
}
 500:	cf 91       	pop	r28
 502:	df 91       	pop	r29
 504:	08 95       	ret

00000506 <setLedOff>:

void setLedOff (void)
{
 506:	df 93       	push	r29
 508:	cf 93       	push	r28
 50a:	cd b7       	in	r28, 0x3d	; 61
 50c:	de b7       	in	r29, 0x3e	; 62
	setPinValue(LED_Port, LED_Pin, LED_Mode^1);
 50e:	81 e4       	ldi	r24, 0x41	; 65
 510:	60 e0       	ldi	r22, 0x00	; 0
 512:	40 e0       	ldi	r20, 0x00	; 0
 514:	0e 94 1a 01 	call	0x234	; 0x234 <setPinValue>
 518:	cf 91       	pop	r28
 51a:	df 91       	pop	r29
 51c:	08 95       	ret

0000051e <portInitialize>:
#include "PORT_private.h"
#include "PORT_config.h"
#include "PORT_register.h"

void portInitialize (void)
{
 51e:	df 93       	push	r29
 520:	cf 93       	push	r28
 522:	cd b7       	in	r28, 0x3d	; 61
 524:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
 526:	ea e3       	ldi	r30, 0x3A	; 58
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	83 e3       	ldi	r24, 0x33	; 51
 52c:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
 52e:	e7 e3       	ldi	r30, 0x37	; 55
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	83 e3       	ldi	r24, 0x33	; 51
 534:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
 536:	e4 e3       	ldi	r30, 0x34	; 52
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	83 e3       	ldi	r24, 0x33	; 51
 53c:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
 53e:	e1 e3       	ldi	r30, 0x31	; 49
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	80 ef       	ldi	r24, 0xF0	; 240
 544:	80 83       	st	Z, r24
	
	PORTA=PORTA_INITIALVALUE;
 546:	eb e3       	ldi	r30, 0x3B	; 59
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	83 e3       	ldi	r24, 0x33	; 51
 54c:	80 83       	st	Z, r24
	PORTB=PORTB_INITIALVALUE;
 54e:	e8 e3       	ldi	r30, 0x38	; 56
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	83 e3       	ldi	r24, 0x33	; 51
 554:	80 83       	st	Z, r24
	PORTC=PORTC_INITIALVALUE;
 556:	e5 e3       	ldi	r30, 0x35	; 53
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	83 e3       	ldi	r24, 0x33	; 51
 55c:	80 83       	st	Z, r24
	PORTD=PORTD_INITIALVALUE;
 55e:	e2 e3       	ldi	r30, 0x32	; 50
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	8f e0       	ldi	r24, 0x0F	; 15
 564:	80 83       	st	Z, r24
 566:	cf 91       	pop	r28
 568:	df 91       	pop	r29
 56a:	08 95       	ret

0000056c <main>:
#include "DIO_interface.h"
#include "PORT_interface.h"
#include "LED_INTERFACE.h"

void main (void)
{
 56c:	df 93       	push	r29
 56e:	cf 93       	push	r28
 570:	cd b7       	in	r28, 0x3d	; 61
 572:	de b7       	in	r29, 0x3e	; 62
	portInitialize();
 574:	0e 94 8f 02 	call	0x51e	; 0x51e <portInitialize>

	while(1)
	{
	if (getPinValue('D',0)==0)
 578:	84 e4       	ldi	r24, 0x44	; 68
 57a:	60 e0       	ldi	r22, 0x00	; 0
 57c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <getPinValue>
 580:	88 23       	and	r24, r24
 582:	31 f4       	brne	.+12     	; 0x590 <main+0x24>
	{
		setPinValue('D',4,1);
 584:	84 e4       	ldi	r24, 0x44	; 68
 586:	64 e0       	ldi	r22, 0x04	; 4
 588:	41 e0       	ldi	r20, 0x01	; 1
 58a:	0e 94 1a 01 	call	0x234	; 0x234 <setPinValue>
 58e:	05 c0       	rjmp	.+10     	; 0x59a <main+0x2e>
	}
	else
	{
		setPinValue('D',4,0);
 590:	84 e4       	ldi	r24, 0x44	; 68
 592:	64 e0       	ldi	r22, 0x04	; 4
 594:	40 e0       	ldi	r20, 0x00	; 0
 596:	0e 94 1a 01 	call	0x234	; 0x234 <setPinValue>
	}

	if (getPinValue('D',1)==0)
 59a:	84 e4       	ldi	r24, 0x44	; 68
 59c:	61 e0       	ldi	r22, 0x01	; 1
 59e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <getPinValue>
 5a2:	88 23       	and	r24, r24
 5a4:	31 f4       	brne	.+12     	; 0x5b2 <main+0x46>
	{
		setPinValue('D',5,1);
 5a6:	84 e4       	ldi	r24, 0x44	; 68
 5a8:	65 e0       	ldi	r22, 0x05	; 5
 5aa:	41 e0       	ldi	r20, 0x01	; 1
 5ac:	0e 94 1a 01 	call	0x234	; 0x234 <setPinValue>
 5b0:	05 c0       	rjmp	.+10     	; 0x5bc <main+0x50>
	}
	else
	{
		setPinValue('D',5,0);
 5b2:	84 e4       	ldi	r24, 0x44	; 68
 5b4:	65 e0       	ldi	r22, 0x05	; 5
 5b6:	40 e0       	ldi	r20, 0x00	; 0
 5b8:	0e 94 1a 01 	call	0x234	; 0x234 <setPinValue>
	}

	if (getPinValue('D',2)==0)
 5bc:	84 e4       	ldi	r24, 0x44	; 68
 5be:	62 e0       	ldi	r22, 0x02	; 2
 5c0:	0e 94 fe 01 	call	0x3fc	; 0x3fc <getPinValue>
 5c4:	88 23       	and	r24, r24
 5c6:	31 f4       	brne	.+12     	; 0x5d4 <main+0x68>
	{
		setPinValue('D',6,1);
 5c8:	84 e4       	ldi	r24, 0x44	; 68
 5ca:	66 e0       	ldi	r22, 0x06	; 6
 5cc:	41 e0       	ldi	r20, 0x01	; 1
 5ce:	0e 94 1a 01 	call	0x234	; 0x234 <setPinValue>
 5d2:	05 c0       	rjmp	.+10     	; 0x5de <main+0x72>
	}
	else
	{
		setPinValue('D',6,0);
 5d4:	84 e4       	ldi	r24, 0x44	; 68
 5d6:	66 e0       	ldi	r22, 0x06	; 6
 5d8:	40 e0       	ldi	r20, 0x00	; 0
 5da:	0e 94 1a 01 	call	0x234	; 0x234 <setPinValue>
	}

	if (getPinValue('D',3)==0)
 5de:	84 e4       	ldi	r24, 0x44	; 68
 5e0:	63 e0       	ldi	r22, 0x03	; 3
 5e2:	0e 94 fe 01 	call	0x3fc	; 0x3fc <getPinValue>
 5e6:	88 23       	and	r24, r24
 5e8:	31 f4       	brne	.+12     	; 0x5f6 <main+0x8a>
	{
		setPinValue('D',7,1);
 5ea:	84 e4       	ldi	r24, 0x44	; 68
 5ec:	67 e0       	ldi	r22, 0x07	; 7
 5ee:	41 e0       	ldi	r20, 0x01	; 1
 5f0:	0e 94 1a 01 	call	0x234	; 0x234 <setPinValue>
 5f4:	c1 cf       	rjmp	.-126    	; 0x578 <main+0xc>
	}
	else
	{
		setPinValue('D',7,0);
 5f6:	84 e4       	ldi	r24, 0x44	; 68
 5f8:	67 e0       	ldi	r22, 0x07	; 7
 5fa:	40 e0       	ldi	r20, 0x00	; 0
 5fc:	0e 94 1a 01 	call	0x234	; 0x234 <setPinValue>
 600:	bb cf       	rjmp	.-138    	; 0x578 <main+0xc>

00000602 <_exit>:
 602:	f8 94       	cli

00000604 <__stop_program>:
 604:	ff cf       	rjmp	.-2      	; 0x604 <__stop_program>
