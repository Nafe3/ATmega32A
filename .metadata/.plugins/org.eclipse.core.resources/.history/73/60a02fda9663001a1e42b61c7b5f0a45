
USART_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000002ca  0000035e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080006a  0080006a  00000368  2**0
                  ALLOC
  3 .stab         00000528  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000004c9  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5e 01 	call	0x2bc	; 0x2bc <main>
  8a:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_voidInit>:
		{0xCF	,	0x67	,	0x08		}			/*Clock System 0 = 16 MHz*/
};


void UART_voidInit(void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	/*U2X = 0*/
	CLR_BIT(UCSRA,1);
  9a:	ab e2       	ldi	r26, 0x2B	; 43
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	eb e2       	ldi	r30, 0x2B	; 43
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	8d 7f       	andi	r24, 0xFD	; 253
  a6:	8c 93       	st	X, r24

	/*Disable all UART interrupts*/
	/*Enable RX and TX*/
	/*Character size 8 bit*/
	UCSRB=0x18;
  a8:	ea e2       	ldi	r30, 0x2A	; 42
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	88 e1       	ldi	r24, 0x18	; 24
  ae:	80 83       	st	Z, r24

	/*Asynch Mode
	 * Character size = 8 bit */
	UCSRC=	(
  b0:	e0 e4       	ldi	r30, 0x40	; 64
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	86 e8       	ldi	r24, 0x86	; 134
  b6:	80 83       	st	Z, r24
			  (UART_u8_PARITY	<<	4)	|
			  (UART_u8_STOP_BITS<<	3)	|
			  (3				<<  1)
			);
	/*Assign Baud Rate*/
	UBRRL=BaudRateValue[UART_u8_SYS_FREQ ][UART_u8_BAUDRATE];
  b8:	e9 e2       	ldi	r30, 0x29	; 41
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 91 61 00 	lds	r24, 0x0061
  c0:	80 83       	st	Z, r24
}
  c2:	cf 91       	pop	r28
  c4:	df 91       	pop	r29
  c6:	08 95       	ret

000000c8 <UART_voidTransmitDataSynch>:
ErrorStatus UART_voidTransmitDataSynch		(u8 Copy_u8Data)
{
  c8:	df 93       	push	r29
  ca:	cf 93       	push	r28
  cc:	00 d0       	rcall	.+0      	; 0xce <UART_voidTransmitDataSynch+0x6>
  ce:	00 d0       	rcall	.+0      	; 0xd0 <UART_voidTransmitDataSynch+0x8>
  d0:	00 d0       	rcall	.+0      	; 0xd2 <UART_voidTransmitDataSynch+0xa>
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
  d6:	8e 83       	std	Y+6, r24	; 0x06
	u32 Local_u32Timeout = 0;
  d8:	1a 82       	std	Y+2, r1	; 0x02
  da:	1b 82       	std	Y+3, r1	; 0x03
  dc:	1c 82       	std	Y+4, r1	; 0x04
  de:	1d 82       	std	Y+5, r1	; 0x05
	u8  Local_u8Error	 = 0;
  e0:	19 82       	std	Y+1, r1	; 0x01

	/*Send data on UDR*/
	UDR_T	=	Copy_u8Data;
  e2:	ec e2       	ldi	r30, 0x2C	; 44
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	8e 81       	ldd	r24, Y+6	; 0x06
  e8:	80 83       	st	Z, r24
  ea:	0b c0       	rjmp	.+22     	; 0x102 <UART_voidTransmitDataSynch+0x3a>

	/*wait till the flag is raised*/
	while ((!(GET_BIT(UCSRA,6)) && Local_u32Timeout < UART_u32_TIME_OUT))
	{
		Local_u32Timeout++;
  ec:	8a 81       	ldd	r24, Y+2	; 0x02
  ee:	9b 81       	ldd	r25, Y+3	; 0x03
  f0:	ac 81       	ldd	r26, Y+4	; 0x04
  f2:	bd 81       	ldd	r27, Y+5	; 0x05
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	a1 1d       	adc	r26, r1
  f8:	b1 1d       	adc	r27, r1
  fa:	8a 83       	std	Y+2, r24	; 0x02
  fc:	9b 83       	std	Y+3, r25	; 0x03
  fe:	ac 83       	std	Y+4, r26	; 0x04
 100:	bd 83       	std	Y+5, r27	; 0x05

	/*Send data on UDR*/
	UDR_T	=	Copy_u8Data;

	/*wait till the flag is raised*/
	while ((!(GET_BIT(UCSRA,6)) && Local_u32Timeout < UART_u32_TIME_OUT))
 102:	eb e2       	ldi	r30, 0x2B	; 43
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	82 95       	swap	r24
 10a:	86 95       	lsr	r24
 10c:	86 95       	lsr	r24
 10e:	83 70       	andi	r24, 0x03	; 3
 110:	88 2f       	mov	r24, r24
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	81 70       	andi	r24, 0x01	; 1
 116:	90 70       	andi	r25, 0x00	; 0
 118:	00 97       	sbiw	r24, 0x00	; 0
 11a:	61 f4       	brne	.+24     	; 0x134 <UART_voidTransmitDataSynch+0x6c>
 11c:	8a 81       	ldd	r24, Y+2	; 0x02
 11e:	9b 81       	ldd	r25, Y+3	; 0x03
 120:	ac 81       	ldd	r26, Y+4	; 0x04
 122:	bd 81       	ldd	r27, Y+5	; 0x05
 124:	80 31       	cpi	r24, 0x10	; 16
 126:	27 e2       	ldi	r18, 0x27	; 39
 128:	92 07       	cpc	r25, r18
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	a2 07       	cpc	r26, r18
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	b2 07       	cpc	r27, r18
 132:	e0 f2       	brcs	.-72     	; 0xec <UART_voidTransmitDataSynch+0x24>
	{
		Local_u32Timeout++;
	}

	/* TimeOUT happened */
		if(Local_u32Timeout >= UART_u32_TIME_OUT)
 134:	8a 81       	ldd	r24, Y+2	; 0x02
 136:	9b 81       	ldd	r25, Y+3	; 0x03
 138:	ac 81       	ldd	r26, Y+4	; 0x04
 13a:	bd 81       	ldd	r27, Y+5	; 0x05
 13c:	80 31       	cpi	r24, 0x10	; 16
 13e:	27 e2       	ldi	r18, 0x27	; 39
 140:	92 07       	cpc	r25, r18
 142:	20 e0       	ldi	r18, 0x00	; 0
 144:	a2 07       	cpc	r26, r18
 146:	20 e0       	ldi	r18, 0x00	; 0
 148:	b2 07       	cpc	r27, r18
 14a:	18 f0       	brcs	.+6      	; 0x152 <UART_voidTransmitDataSynch+0x8a>
		{
			Local_u8Error = STD_TYPES_ERROR_NOK ;
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	89 83       	std	Y+1, r24	; 0x01
 150:	07 c0       	rjmp	.+14     	; 0x160 <UART_voidTransmitDataSynch+0x98>
		}
		else
		{
			CLR_BIT(UCSRA,6);
 152:	ab e2       	ldi	r26, 0x2B	; 43
 154:	b0 e0       	ldi	r27, 0x00	; 0
 156:	eb e2       	ldi	r30, 0x2B	; 43
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	8f 7b       	andi	r24, 0xBF	; 191
 15e:	8c 93       	st	X, r24
		}
		return Local_u8Error;
 160:	89 81       	ldd	r24, Y+1	; 0x01

}
 162:	26 96       	adiw	r28, 0x06	; 6
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	f8 94       	cli
 168:	de bf       	out	0x3e, r29	; 62
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	cd bf       	out	0x3d, r28	; 61
 16e:	cf 91       	pop	r28
 170:	df 91       	pop	r29
 172:	08 95       	ret

00000174 <UART_u8RecieveSynch>:

ErrorStatus   UART_u8RecieveSynch	(u8* Copy_u8Data)
{
 174:	df 93       	push	r29
 176:	cf 93       	push	r28
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
 17c:	27 97       	sbiw	r28, 0x07	; 7
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	f8 94       	cli
 182:	de bf       	out	0x3e, r29	; 62
 184:	0f be       	out	0x3f, r0	; 63
 186:	cd bf       	out	0x3d, r28	; 61
 188:	9f 83       	std	Y+7, r25	; 0x07
 18a:	8e 83       	std	Y+6, r24	; 0x06
	u32 		Local_u32TimeOut=	0;
 18c:	1a 82       	std	Y+2, r1	; 0x02
 18e:	1b 82       	std	Y+3, r1	; 0x03
 190:	1c 82       	std	Y+4, r1	; 0x04
 192:	1d 82       	std	Y+5, r1	; 0x05
	ErrorStatus Local_u8Status	=	STD_TYPES_ERROR_OK ;
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	89 83       	std	Y+1, r24	; 0x01

	/* send data on UDR */
	UDR_T = *Copy_u8Data;
 198:	ac e2       	ldi	r26, 0x2C	; 44
 19a:	b0 e0       	ldi	r27, 0x00	; 0
 19c:	ee 81       	ldd	r30, Y+6	; 0x06
 19e:	ff 81       	ldd	r31, Y+7	; 0x07
 1a0:	80 81       	ld	r24, Z
 1a2:	8c 93       	st	X, r24
 1a4:	0b c0       	rjmp	.+22     	; 0x1bc <UART_u8RecieveSynch+0x48>

	/*Wait until */
	while (!(GET_BIT(UCSRA,6)) && Local_u32TimeOut < UART_u32_TIME_OUT)
	{
		Local_u32TimeOut++;
 1a6:	8a 81       	ldd	r24, Y+2	; 0x02
 1a8:	9b 81       	ldd	r25, Y+3	; 0x03
 1aa:	ac 81       	ldd	r26, Y+4	; 0x04
 1ac:	bd 81       	ldd	r27, Y+5	; 0x05
 1ae:	01 96       	adiw	r24, 0x01	; 1
 1b0:	a1 1d       	adc	r26, r1
 1b2:	b1 1d       	adc	r27, r1
 1b4:	8a 83       	std	Y+2, r24	; 0x02
 1b6:	9b 83       	std	Y+3, r25	; 0x03
 1b8:	ac 83       	std	Y+4, r26	; 0x04
 1ba:	bd 83       	std	Y+5, r27	; 0x05

	/* send data on UDR */
	UDR_T = *Copy_u8Data;

	/*Wait until */
	while (!(GET_BIT(UCSRA,6)) && Local_u32TimeOut < UART_u32_TIME_OUT)
 1bc:	eb e2       	ldi	r30, 0x2B	; 43
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	82 95       	swap	r24
 1c4:	86 95       	lsr	r24
 1c6:	86 95       	lsr	r24
 1c8:	83 70       	andi	r24, 0x03	; 3
 1ca:	88 2f       	mov	r24, r24
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	81 70       	andi	r24, 0x01	; 1
 1d0:	90 70       	andi	r25, 0x00	; 0
 1d2:	00 97       	sbiw	r24, 0x00	; 0
 1d4:	61 f4       	brne	.+24     	; 0x1ee <UART_u8RecieveSynch+0x7a>
 1d6:	8a 81       	ldd	r24, Y+2	; 0x02
 1d8:	9b 81       	ldd	r25, Y+3	; 0x03
 1da:	ac 81       	ldd	r26, Y+4	; 0x04
 1dc:	bd 81       	ldd	r27, Y+5	; 0x05
 1de:	80 31       	cpi	r24, 0x10	; 16
 1e0:	27 e2       	ldi	r18, 0x27	; 39
 1e2:	92 07       	cpc	r25, r18
 1e4:	20 e0       	ldi	r18, 0x00	; 0
 1e6:	a2 07       	cpc	r26, r18
 1e8:	20 e0       	ldi	r18, 0x00	; 0
 1ea:	b2 07       	cpc	r27, r18
 1ec:	e0 f2       	brcs	.-72     	; 0x1a6 <UART_u8RecieveSynch+0x32>
	{
		Local_u32TimeOut++;
	}
	/* TimeOUT happened */
	if(Local_u32TimeOut >= UART_u32_TIME_OUT)
 1ee:	8a 81       	ldd	r24, Y+2	; 0x02
 1f0:	9b 81       	ldd	r25, Y+3	; 0x03
 1f2:	ac 81       	ldd	r26, Y+4	; 0x04
 1f4:	bd 81       	ldd	r27, Y+5	; 0x05
 1f6:	80 31       	cpi	r24, 0x10	; 16
 1f8:	27 e2       	ldi	r18, 0x27	; 39
 1fa:	92 07       	cpc	r25, r18
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	a2 07       	cpc	r26, r18
 200:	20 e0       	ldi	r18, 0x00	; 0
 202:	b2 07       	cpc	r27, r18
 204:	18 f0       	brcs	.+6      	; 0x20c <UART_u8RecieveSynch+0x98>
	{
		Local_u8Status = STD_TYPES_ERROR_NOK ;
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	89 83       	std	Y+1, r24	; 0x01
 20a:	06 c0       	rjmp	.+12     	; 0x218 <UART_u8RecieveSynch+0xa4>
	}
	else
	{
		*Copy_u8Data = UDR_R;
 20c:	ec e2       	ldi	r30, 0x2C	; 44
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	ee 81       	ldd	r30, Y+6	; 0x06
 214:	ff 81       	ldd	r31, Y+7	; 0x07
 216:	80 83       	st	Z, r24
	}
	return Local_u8Status;
 218:	89 81       	ldd	r24, Y+1	; 0x01
}
 21a:	27 96       	adiw	r28, 0x07	; 7
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	f8 94       	cli
 220:	de bf       	out	0x3e, r29	; 62
 222:	0f be       	out	0x3f, r0	; 63
 224:	cd bf       	out	0x3d, r28	; 61
 226:	cf 91       	pop	r28
 228:	df 91       	pop	r29
 22a:	08 95       	ret

0000022c <UART_voidTransmitDataAsynch>:


void UART_voidTransmitDataAsynch	(u8 Copy_u8Data, void(*Copy_ptr)(void))
{
 22c:	df 93       	push	r29
 22e:	cf 93       	push	r28
 230:	00 d0       	rcall	.+0      	; 0x232 <UART_voidTransmitDataAsynch+0x6>
 232:	0f 92       	push	r0
 234:	cd b7       	in	r28, 0x3d	; 61
 236:	de b7       	in	r29, 0x3e	; 62
 238:	89 83       	std	Y+1, r24	; 0x01
 23a:	7b 83       	std	Y+3, r23	; 0x03
 23c:	6a 83       	std	Y+2, r22	; 0x02
	/* Disable interrupt */
	SET_BIT(UCSRB,6);
 23e:	aa e2       	ldi	r26, 0x2A	; 42
 240:	b0 e0       	ldi	r27, 0x00	; 0
 242:	ea e2       	ldi	r30, 0x2A	; 42
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	80 64       	ori	r24, 0x40	; 64
 24a:	8c 93       	st	X, r24

	/* Set recieved data  */
	UDR_T=Copy_u8Data;
 24c:	ec e2       	ldi	r30, 0x2C	; 44
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	80 83       	st	Z, r24

	/*save the callback address */
	EndofTransmitCB=Copy_ptr;
 254:	8a 81       	ldd	r24, Y+2	; 0x02
 256:	9b 81       	ldd	r25, Y+3	; 0x03
 258:	90 93 6d 00 	sts	0x006D, r25
 25c:	80 93 6c 00 	sts	0x006C, r24
}
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	0f 90       	pop	r0
 266:	cf 91       	pop	r28
 268:	df 91       	pop	r29
 26a:	08 95       	ret

0000026c <UART_u8RecieveAsynch>:


void UART_u8RecieveAsynch	(void(*Copy_ptr)(u8))
{
 26c:	df 93       	push	r29
 26e:	cf 93       	push	r28
 270:	00 d0       	rcall	.+0      	; 0x272 <UART_u8RecieveAsynch+0x6>
 272:	cd b7       	in	r28, 0x3d	; 61
 274:	de b7       	in	r29, 0x3e	; 62
 276:	9a 83       	std	Y+2, r25	; 0x02
 278:	89 83       	std	Y+1, r24	; 0x01
	if(GET_BIT(UCSRA,7) ==1)
 27a:	eb e2       	ldi	r30, 0x2B	; 43
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	80 81       	ld	r24, Z
 280:	88 1f       	adc	r24, r24
 282:	88 27       	eor	r24, r24
 284:	88 1f       	adc	r24, r24
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	39 f4       	brne	.+14     	; 0x298 <UART_u8RecieveAsynch+0x2c>
	{
		Copy_ptr(UDR_R);
 28a:	ec e2       	ldi	r30, 0x2C	; 44
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	e9 81       	ldd	r30, Y+1	; 0x01
 292:	fa 81       	ldd	r31, Y+2	; 0x02
 294:	09 95       	icall
 296:	0d c0       	rjmp	.+26     	; 0x2b2 <UART_u8RecieveAsynch+0x46>
	}
	else
	{
		SET_BIT(UCSRB,7);
 298:	aa e2       	ldi	r26, 0x2A	; 42
 29a:	b0 e0       	ldi	r27, 0x00	; 0
 29c:	ea e2       	ldi	r30, 0x2A	; 42
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	80 68       	ori	r24, 0x80	; 128
 2a4:	8c 93       	st	X, r24

		EndofRECCB=Copy_ptr;
 2a6:	89 81       	ldd	r24, Y+1	; 0x01
 2a8:	9a 81       	ldd	r25, Y+2	; 0x02
 2aa:	90 93 6b 00 	sts	0x006B, r25
 2ae:	80 93 6a 00 	sts	0x006A, r24
	}
}
 2b2:	0f 90       	pop	r0
 2b4:	0f 90       	pop	r0
 2b6:	cf 91       	pop	r28
 2b8:	df 91       	pop	r29
 2ba:	08 95       	ret

000002bc <main>:
 *  Created on: Mar 9, 2020
 *      Author: Mohamed Nafea
 */

int main(void)
{
 2bc:	df 93       	push	r29
 2be:	cf 93       	push	r28
 2c0:	cd b7       	in	r28, 0x3d	; 61
 2c2:	de b7       	in	r29, 0x3e	; 62
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <main+0x8>

000002c6 <_exit>:
 2c6:	f8 94       	cli

000002c8 <__stop_program>:
 2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <__stop_program>
